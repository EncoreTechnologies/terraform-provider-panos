package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/address/group"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &AddressGroupDataSource{}
	_ datasource.DataSourceWithConfigure = &AddressGroupDataSource{}
)

func NewAddressGroupDataSource() datasource.DataSource {
	return &AddressGroupDataSource{}
}

type AddressGroupDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*group.Entry, group.Location, *group.Service]
}

type AddressGroupDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type AddressGroupDataSourceTfid struct {
	Name     string         `json:"name"`
	Location group.Location `json:"location"`
}

func (o *AddressGroupDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type AddressGroupDataSourceModel struct {
	Tfid        types.String         `tfsdk:"tfid"`
	Location    AddressGroupLocation `tfsdk:"location"`
	Name        types.String         `tfsdk:"name"`
	Description types.String         `tfsdk:"description"`
	Tags        types.List           `tfsdk:"tags"`
	Static      types.List           `tfsdk:"static"`
	Dynamic     types.String         `tfsdk:"dynamic"`
}

func (o *AddressGroupDataSourceModel) CopyToPango(ctx context.Context, obj **group.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	static_pango_entries := make([]string, 0)
	diags.Append(o.Static.ElementsAs(ctx, &static_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	dynamic_value := o.Dynamic.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(group.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Tags = tags_pango_entries
	(*obj).Description = description_value
	(*obj).Static = static_pango_entries
	(*obj).Dynamic = dynamic_value

	return diags
}

func (o *AddressGroupDataSourceModel) CopyFromPango(ctx context.Context, obj *group.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var static_list types.List
	{
		var list_diags diag.Diagnostics
		static_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Static)
		diags.Append(list_diags...)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var dynamic_value types.String
	if obj.Dynamic != nil {
		dynamic_value = types.StringValue(*obj.Dynamic)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Tags = tags_list
	o.Static = static_list
	o.Dynamic = dynamic_value

	return diags
}

func AddressGroupDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": AddressGroupDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": dsschema.StringAttribute{
				Description: "The name of the address group.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": dsschema.StringAttribute{
				Description: "The description.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"static": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("static"),
						path.MatchRelative().AtParent().AtName("dynamic"),
					}...),
				},
			},

			"dynamic": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AddressGroupDataSourceModel) getTypeFor(name string) attr.Type {
	schema := AddressGroupDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AddressGroupDataSourceLocationSchema() rsschema.Attribute {
	return AddressGroupLocationSchema()
}

// Metadata returns the data source type name.
func (d *AddressGroupDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_address_group"
}

// Schema defines the schema for this data source.
func (d *AddressGroupDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = AddressGroupDataSourceSchema()
}

// Configure prepares the struct.
func (d *AddressGroupDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := group.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, group.NewService(d.client), specifier, group.SpecMatches)
}

func (o *AddressGroupDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state AddressGroupDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc AddressGroupDataSourceTfid
	loc.Name = *savestate.Name.ValueStringPointer()

	if !savestate.Location.FromPanoramaShared.IsNull() && savestate.Location.FromPanoramaShared.ValueBool() {
		loc.Location.FromPanoramaShared = true
	}
	if savestate.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &group.FromPanoramaVsysLocation{

			Vsys: savestate.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if savestate.Location.DeviceGroup != nil {
		loc.Location.DeviceGroup = &group.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}
	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		loc.Location.Shared = true
	}
	if savestate.Location.Vsys != nil {
		loc.Location.Vsys = &group.VsysLocation{

			NgfwDevice: savestate.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       savestate.Location.Vsys.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_address_group_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &AddressGroupResource{}
	_ resource.ResourceWithConfigure   = &AddressGroupResource{}
	_ resource.ResourceWithImportState = &AddressGroupResource{}
)

func NewAddressGroupResource() resource.Resource {
	return &AddressGroupResource{}
}

type AddressGroupResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*group.Entry, group.Location, *group.Service]
}
type AddressGroupResourceTfid struct {
	Name     string         `json:"name"`
	Location group.Location `json:"location"`
}

func (o *AddressGroupResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func AddressGroupResourceLocationSchema() rsschema.Attribute {
	return AddressGroupLocationSchema()
}

type AddressGroupResourceModel struct {
	Tfid        types.String         `tfsdk:"tfid"`
	Location    AddressGroupLocation `tfsdk:"location"`
	Name        types.String         `tfsdk:"name"`
	Description types.String         `tfsdk:"description"`
	Tags        types.List           `tfsdk:"tags"`
	Dynamic     types.String         `tfsdk:"dynamic"`
	Static      types.List           `tfsdk:"static"`
}

func (r *AddressGroupResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_address_group"
}

func (r *AddressGroupResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func AddressGroupResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": AddressGroupResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": rsschema.StringAttribute{
				Description: "The name of the address group.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "The description.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"static": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("static"),
						path.MatchRelative().AtParent().AtName("dynamic"),
					}...),
				},
			},

			"dynamic": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AddressGroupResourceModel) getTypeFor(name string) attr.Type {
	schema := AddressGroupResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *AddressGroupResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = AddressGroupResourceSchema()
}

// </ResourceSchema>

func (r *AddressGroupResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := group.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, group.NewService(r.client), specifier, group.SpecMatches)
}

func (o *AddressGroupResourceModel) CopyToPango(ctx context.Context, obj **group.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	static_pango_entries := make([]string, 0)
	diags.Append(o.Static.ElementsAs(ctx, &static_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	dynamic_value := o.Dynamic.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(group.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Tags = tags_pango_entries
	(*obj).Description = description_value
	(*obj).Static = static_pango_entries
	(*obj).Dynamic = dynamic_value

	return diags
}

func (o *AddressGroupResourceModel) CopyFromPango(ctx context.Context, obj *group.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var static_list types.List
	{
		var list_diags diag.Diagnostics
		static_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Static)
		diags.Append(list_diags...)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var dynamic_value types.String
	if obj.Dynamic != nil {
		dynamic_value = types.StringValue(*obj.Dynamic)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Tags = tags_list
	o.Static = static_list
	o.Dynamic = dynamic_value

	return diags
}

func (r *AddressGroupResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state AddressGroupResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_address_group_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := AddressGroupResourceTfid{Name: state.Name.ValueString()}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		loc.Location.Shared = true
	}
	if state.Location.Vsys != nil {
		loc.Location.Vsys = &group.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if !state.Location.FromPanoramaShared.IsNull() && state.Location.FromPanoramaShared.ValueBool() {
		loc.Location.FromPanoramaShared = true
	}
	if state.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &group.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		loc.Location.DeviceGroup = &group.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *group.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *AddressGroupResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state AddressGroupResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc AddressGroupResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_address_group_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *AddressGroupResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state AddressGroupResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc AddressGroupResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_address_group_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	loc.Name = obj.Name
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *AddressGroupResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state AddressGroupResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc AddressGroupResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_address_group_resource",
		"function":      "Delete",
		"name":          loc.Name,
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	err := r.manager.Delete(ctx, loc.Location, []string{loc.Name})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *AddressGroupResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type AddressGroupVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type AddressGroupFromPanoramaVsysLocation struct {
	Vsys types.String `tfsdk:"vsys"`
}
type AddressGroupDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type AddressGroupLocation struct {
	Shared             types.Bool                            `tfsdk:"shared"`
	Vsys               *AddressGroupVsysLocation             `tfsdk:"vsys"`
	FromPanoramaShared types.Bool                            `tfsdk:"from_panorama_shared"`
	FromPanoramaVsys   *AddressGroupFromPanoramaVsysLocation `tfsdk:"from_panorama_vsys"`
	DeviceGroup        *AddressGroupDeviceGroupLocation      `tfsdk:"device_group"`
}

func AddressGroupLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.BoolAttribute{
				Description: "Located in shared.",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Bool{
					boolvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("from_panorama_shared"),
						path.MatchRelative().AtParent().AtName("from_panorama_vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_shared": rsschema.BoolAttribute{
				Description: "Located in shared in the config pushed from Panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys in the config pushed from Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
