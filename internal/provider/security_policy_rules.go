package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	sdkerrors "github.com/PaloAltoNetworks/pango/errors"
	"github.com/PaloAltoNetworks/pango/policies/rules/security"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &SecurityPolicyRulesDataSource{}
	_ datasource.DataSourceWithConfigure = &SecurityPolicyRulesDataSource{}
)

func NewSecurityPolicyRulesDataSource() datasource.DataSource {
	return &SecurityPolicyRulesDataSource{}
}

type SecurityPolicyRulesDataSource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}

type SecurityPolicyRulesDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type SecurityPolicyRulesDataSourceTfid struct {
	Name     string            `json:"name"`
	Location security.Location `json:"location"`
}

func (o *SecurityPolicyRulesDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type SecurityPolicyRulesDataSourceModel struct {
	Location SecurityPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject     `tfsdk:"position"`
	Rules    types.List                  `tfsdk:"rules"`
}
type SecurityPolicyRulesDataSourceRulesObject struct {
	Name                            types.String                                            `tfsdk:"name"`
	NegateDestination               types.Bool                                              `tfsdk:"negate_destination"`
	Action                          types.String                                            `tfsdk:"action"`
	LogStart                        types.Bool                                              `tfsdk:"log_start"`
	DestinationAddresses            types.List                                              `tfsdk:"destination_addresses"`
	Applications                    types.List                                              `tfsdk:"applications"`
	SourceHips                      types.List                                              `tfsdk:"source_hips"`
	DestinationHips                 types.List                                              `tfsdk:"destination_hips"`
	NegateSource                    types.Bool                                              `tfsdk:"negate_source"`
	DisableServerResponseInspection types.Bool                                              `tfsdk:"disable_server_response_inspection"`
	Tags                            types.List                                              `tfsdk:"tags"`
	SourceAddresses                 types.List                                              `tfsdk:"source_addresses"`
	Services                        types.List                                              `tfsdk:"services"`
	Disabled                        types.Bool                                              `tfsdk:"disabled"`
	LogEnd                          types.Bool                                              `tfsdk:"log_end"`
	IcmpUnreachable                 types.Bool                                              `tfsdk:"icmp_unreachable"`
	ProfileSetting                  *SecurityPolicyRulesDataSourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Uuid                            types.String                                            `tfsdk:"uuid"`
	SourceZones                     types.List                                              `tfsdk:"source_zones"`
	Categories                      types.List                                              `tfsdk:"categories"`
	RuleType                        types.String                                            `tfsdk:"rule_type"`
	LogSetting                      types.String                                            `tfsdk:"log_setting"`
	Description                     types.String                                            `tfsdk:"description"`
	DestinationZones                types.List                                              `tfsdk:"destination_zones"`
	SourceUsers                     types.List                                              `tfsdk:"source_users"`
}
type SecurityPolicyRulesDataSourceRulesProfileSettingObject struct {
	Group    types.String                                                    `tfsdk:"group"`
	Profiles *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
}
type SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject struct {
	FileBlocking     types.List `tfsdk:"file_blocking"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
	DataFiltering    types.List `tfsdk:"data_filtering"`
	Virus            types.List `tfsdk:"virus"`
	Spyware          types.List `tfsdk:"spyware"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
}

func (o *SecurityPolicyRulesDataSourceRulesObject) CopyToPango(ctx context.Context, obj **security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	uuid_value := o.Uuid.ValueStringPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	categories_pango_entries := make([]string, 0)
	diags.Append(o.Categories.ElementsAs(ctx, &categories_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}

		diags.Append(o.ProfileSetting.CopyToPango(ctx, &profileSetting_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	description_value := o.Description.ValueStringPointer()
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logStart_value := o.LogStart.ValueBoolPointer()
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceHips_pango_entries := make([]string, 0)
	diags.Append(o.SourceHips.ElementsAs(ctx, &sourceHips_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHips_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHips.ElementsAs(ctx, &destinationHips_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	negateSource_value := o.NegateSource.ValueBoolPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	action_value := o.Action.ValueStringPointer()
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disabled_value := o.Disabled.ValueBoolPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Uuid = uuid_value
	(*obj).SourceZones = sourceZones_pango_entries
	(*obj).Categories = categories_pango_entries
	(*obj).RuleType = ruleType_value
	(*obj).LogSetting = logSetting_value
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Description = description_value
	(*obj).DestinationZones = destinationZones_pango_entries
	(*obj).SourceUsers = sourceUsers_pango_entries
	(*obj).LogStart = logStart_value
	(*obj).DestinationAddresses = destinationAddresses_pango_entries
	(*obj).Applications = applications_pango_entries
	(*obj).SourceHips = sourceHips_pango_entries
	(*obj).DestinationHips = destinationHips_pango_entries
	(*obj).NegateSource = negateSource_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).Action = action_value
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).Tags = tags_pango_entries
	(*obj).SourceAddresses = sourceAddresses_pango_entries
	(*obj).Services = services_pango_entries
	(*obj).Disabled = disabled_value
	(*obj).LogEnd = logEnd_value

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) CopyToPango(ctx context.Context, obj **security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	group_value := o.Group.ValueStringPointer()
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}

		diags.Append(o.Profiles.CopyToPango(ctx, &profiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_value
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, obj **security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).Virus = virus_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries
	(*obj).DataFiltering = dataFiltering_pango_entries

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesObject) CopyFromPango(ctx context.Context, obj *security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceZones)
		diags.Append(list_diags...)
	}
	var categories_list types.List
	{
		var list_diags diag.Diagnostics
		categories_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Categories)
		diags.Append(list_diags...)
	}
	var destinationZones_list types.List
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationZones)
		diags.Append(list_diags...)
	}
	var sourceUsers_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUsers)
		diags.Append(list_diags...)
	}
	var destinationHips_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHips_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHips)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationAddresses)
		diags.Append(list_diags...)
	}
	var applications_list types.List
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Applications)
		diags.Append(list_diags...)
	}
	var sourceHips_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHips_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHips)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceAddresses)
		diags.Append(list_diags...)
	}
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Services)
		diags.Append(list_diags...)
	}
	var profileSetting_object *SecurityPolicyRulesDataSourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyRulesDataSourceRulesProfileSettingObject)

		diags.Append(profileSetting_object.CopyFromPango(ctx, obj.ProfileSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	o.Name = types.StringValue(obj.Name)
	o.RuleType = ruleType_value
	o.LogSetting = logSetting_value
	o.IcmpUnreachable = icmpUnreachable_value
	o.ProfileSetting = profileSetting_object
	o.Uuid = uuid_value
	o.SourceZones = sourceZones_list
	o.Categories = categories_list
	o.Description = description_value
	o.DestinationZones = destinationZones_list
	o.SourceUsers = sourceUsers_list
	o.DestinationHips = destinationHips_list
	o.NegateSource = negateSource_value
	o.NegateDestination = negateDestination_value
	o.Action = action_value
	o.LogStart = logStart_value
	o.DestinationAddresses = destinationAddresses_list
	o.Applications = applications_list
	o.SourceHips = sourceHips_list
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.Disabled = disabled_value
	o.LogEnd = logEnd_value
	o.Tags = tags_list
	o.SourceAddresses = sourceAddresses_list
	o.Services = services_list

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, obj *security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var profiles_object *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject)

		diags.Append(profiles_object.CopyFromPango(ctx, obj.Profiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var group_value types.String
	if obj.Group != nil {
		group_value = types.StringValue(*obj.Group)
	}
	o.Group = group_value
	o.Profiles = profiles_object

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, obj *security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
	}
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
	}
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
	}
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
	}
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
	}
	o.Spyware = spyware_list
	o.Vulnerability = vulnerability_list
	o.UrlFiltering = urlFiltering_list
	o.FileBlocking = fileBlocking_list
	o.WildfireAnalysis = wildfireAnalysis_list
	o.DataFiltering = dataFiltering_list
	o.Virus = virus_list

	return diags
}

func SecurityPolicyRulesDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": SecurityPolicyRulesDataSourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesDataSourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "The name of the security policy rule.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": dsschema.ListAttribute{
				Description: "Source addresses",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"services": dsschema.ListAttribute{
				Description: "Services",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disabled": dsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": dsschema.BoolAttribute{
				Description: "Log at session end",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"uuid": dsschema.StringAttribute{
				Description: "The UUID value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": dsschema.ListAttribute{
				Description: "Source zones",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"categories": dsschema.ListAttribute{
				Description: "Categories",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"rule_type": dsschema.StringAttribute{
				Description: "Rule type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": dsschema.StringAttribute{
				Description: "Log forwarding",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"icmp_unreachable": dsschema.BoolAttribute{
				Description: "Send ICMP unreachable",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyRulesDataSourceRulesProfileSettingSchema(),

			"description": dsschema.StringAttribute{
				Description: "The description.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_zones": dsschema.ListAttribute{
				Description: "Destination zones",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": dsschema.ListAttribute{
				Description: "Source users",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_addresses": dsschema.ListAttribute{
				Description: "Destination addresses",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"applications": dsschema.ListAttribute{
				Description: "Applications",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hips": dsschema.ListAttribute{
				Description: "Source HIPs",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hips": dsschema.ListAttribute{
				Description: "Destination HIPs",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"negate_source": dsschema.BoolAttribute{
				Description: "Negate source address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": dsschema.BoolAttribute{
				Description: "Negate destination address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "Action",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_start": dsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_server_response_inspection": dsschema.BoolAttribute{
				Description: "Disable Server Response Inspection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesProfileSettingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"group": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("group"),
						path.MatchRelative().AtParent().AtName("profiles"),
					}...),
				},
			},

			"profiles": SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"virus": dsschema.ListAttribute{
				Description: "Antivirus profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": dsschema.ListAttribute{
				Description: "Anti-Spyware profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"vulnerability": dsschema.ListAttribute{
				Description: "Vulnerability Protection profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": dsschema.ListAttribute{
				Description: "URL filtering profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"file_blocking": dsschema.ListAttribute{
				Description: "File blocking profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": dsschema.ListAttribute{
				Description: "WildFire analysis profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"data_filtering": dsschema.ListAttribute{
				Description: "Data filtering profile",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyRulesLocationSchema()
}

// Metadata returns the data source type name.
func (d *SecurityPolicyRulesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy_rules"
}

// Schema defines the schema for this data source.
func (d *SecurityPolicyRulesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = SecurityPolicyRulesDataSourceSchema()
}

// Configure prepares the struct.
func (d *SecurityPolicyRulesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := security.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewUuidObjectManager(d.client, security.NewService(d.client), specifier, security.SpecMatches)
}

func (o *SecurityPolicyRulesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state SecurityPolicyRulesDataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.FromPanoramaVsys != nil {
		location.FromPanoramaVsys = &security.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
		}
	}
	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			Vsys:       state.Location.Vsys.Name.ValueString(),
			Rulebase:   state.Location.Vsys.Rulebase.ValueString(),
			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesDataSourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyRulesDataSourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyRulesDataSourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &SecurityPolicyRulesResource{}
	_ resource.ResourceWithConfigure   = &SecurityPolicyRulesResource{}
	_ resource.ResourceWithImportState = &SecurityPolicyRulesResource{}
)

func NewSecurityPolicyRulesResource() resource.Resource {
	return &SecurityPolicyRulesResource{}
}

type SecurityPolicyRulesResource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}
type SecurityPolicyRulesResourceTfid struct {
	Name     string            `json:"name"`
	Location security.Location `json:"location"`
}

func (o *SecurityPolicyRulesResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func SecurityPolicyRulesResourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyRulesLocationSchema()
}

type SecurityPolicyRulesResourceModel struct {
	Location SecurityPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject     `tfsdk:"position"`
	Rules    types.List                  `tfsdk:"rules"`
}
type SecurityPolicyRulesResourceRulesObject struct {
	Name                            types.String                                          `tfsdk:"name"`
	ProfileSetting                  *SecurityPolicyRulesResourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Uuid                            types.String                                          `tfsdk:"uuid"`
	SourceZones                     types.List                                            `tfsdk:"source_zones"`
	Categories                      types.List                                            `tfsdk:"categories"`
	RuleType                        types.String                                          `tfsdk:"rule_type"`
	LogSetting                      types.String                                          `tfsdk:"log_setting"`
	IcmpUnreachable                 types.Bool                                            `tfsdk:"icmp_unreachable"`
	Description                     types.String                                          `tfsdk:"description"`
	DestinationZones                types.List                                            `tfsdk:"destination_zones"`
	SourceUsers                     types.List                                            `tfsdk:"source_users"`
	Action                          types.String                                          `tfsdk:"action"`
	LogStart                        types.Bool                                            `tfsdk:"log_start"`
	DestinationAddresses            types.List                                            `tfsdk:"destination_addresses"`
	Applications                    types.List                                            `tfsdk:"applications"`
	SourceHips                      types.List                                            `tfsdk:"source_hips"`
	DestinationHips                 types.List                                            `tfsdk:"destination_hips"`
	NegateSource                    types.Bool                                            `tfsdk:"negate_source"`
	NegateDestination               types.Bool                                            `tfsdk:"negate_destination"`
	DisableServerResponseInspection types.Bool                                            `tfsdk:"disable_server_response_inspection"`
	Tags                            types.List                                            `tfsdk:"tags"`
	SourceAddresses                 types.List                                            `tfsdk:"source_addresses"`
	Services                        types.List                                            `tfsdk:"services"`
	Disabled                        types.Bool                                            `tfsdk:"disabled"`
	LogEnd                          types.Bool                                            `tfsdk:"log_end"`
}
type SecurityPolicyRulesResourceRulesProfileSettingObject struct {
	Profiles *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
	Group    types.String                                                  `tfsdk:"group"`
}
type SecurityPolicyRulesResourceRulesProfileSettingProfilesObject struct {
	Spyware          types.List `tfsdk:"spyware"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
	FileBlocking     types.List `tfsdk:"file_blocking"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
	DataFiltering    types.List `tfsdk:"data_filtering"`
	Virus            types.List `tfsdk:"virus"`
}

func (r *SecurityPolicyRulesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy_rules"
}

func (r *SecurityPolicyRulesResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var resource SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &resource)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resource.Position.ValidateConfig(resp)
}

// <ResourceSchema>

func SecurityPolicyRulesResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": SecurityPolicyRulesResourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesResourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "The name of the security policy rule.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"rule_type": rsschema.StringAttribute{
				Description: "Rule type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("intrazone"),
			},

			"log_setting": rsschema.StringAttribute{
				Description: "Log forwarding",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"icmp_unreachable": rsschema.BoolAttribute{
				Description: "Send ICMP unreachable",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyRulesResourceRulesProfileSettingSchema(),

			"uuid": rsschema.StringAttribute{
				Description: "The UUID value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": rsschema.ListAttribute{
				Description: "Source zones",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"categories": rsschema.ListAttribute{
				Description: "Categories",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": rsschema.StringAttribute{
				Description: "The description.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_zones": rsschema.ListAttribute{
				Description: "Destination zones",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": rsschema.ListAttribute{
				Description: "Source users",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hips": rsschema.ListAttribute{
				Description: "Destination HIPs",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"negate_source": rsschema.BoolAttribute{
				Description: "Negate source address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": rsschema.BoolAttribute{
				Description: "Negate destination address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "Action",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("allow"),
			},

			"log_start": rsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_addresses": rsschema.ListAttribute{
				Description: "Destination addresses",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"applications": rsschema.ListAttribute{
				Description: "Applications",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hips": rsschema.ListAttribute{
				Description: "Source HIPs",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disable_server_response_inspection": rsschema.BoolAttribute{
				Description: "Disable Server Response Inspection",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disabled": rsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": rsschema.BoolAttribute{
				Description: "Log at session end",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": rsschema.ListAttribute{
				Description: "Source addresses",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"services": rsschema.ListAttribute{
				Description: "Services",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesProfileSettingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"group": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("group"),
						path.MatchRelative().AtParent().AtName("profiles"),
					}...),
				},
			},

			"profiles": SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"vulnerability": rsschema.ListAttribute{
				Description: "Vulnerability Protection profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": rsschema.ListAttribute{
				Description: "URL filtering profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"file_blocking": rsschema.ListAttribute{
				Description: "File blocking profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": rsschema.ListAttribute{
				Description: "WildFire analysis profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"data_filtering": rsschema.ListAttribute{
				Description: "Data filtering profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virus": rsschema.ListAttribute{
				Description: "Antivirus profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": rsschema.ListAttribute{
				Description: "Anti-Spyware profile",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *SecurityPolicyRulesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = SecurityPolicyRulesResourceSchema()
}

// </ResourceSchema>

func (r *SecurityPolicyRulesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := security.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewUuidObjectManager(r.client, security.NewService(r.client), specifier, security.SpecMatches)
}

func (o *SecurityPolicyRulesResourceRulesObject) CopyToPango(ctx context.Context, obj **security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	sourceHips_pango_entries := make([]string, 0)
	diags.Append(o.SourceHips.ElementsAs(ctx, &sourceHips_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHips_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHips.ElementsAs(ctx, &destinationHips_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	negateSource_value := o.NegateSource.ValueBoolPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	action_value := o.Action.ValueStringPointer()
	logStart_value := o.LogStart.ValueBoolPointer()
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disabled_value := o.Disabled.ValueBoolPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	categories_pango_entries := make([]string, 0)
	diags.Append(o.Categories.ElementsAs(ctx, &categories_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}

		diags.Append(o.ProfileSetting.CopyToPango(ctx, &profileSetting_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	uuid_value := o.Uuid.ValueStringPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).SourceHips = sourceHips_pango_entries
	(*obj).DestinationHips = destinationHips_pango_entries
	(*obj).NegateSource = negateSource_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).Action = action_value
	(*obj).LogStart = logStart_value
	(*obj).DestinationAddresses = destinationAddresses_pango_entries
	(*obj).Applications = applications_pango_entries
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).Services = services_pango_entries
	(*obj).Disabled = disabled_value
	(*obj).LogEnd = logEnd_value
	(*obj).Tags = tags_pango_entries
	(*obj).SourceAddresses = sourceAddresses_pango_entries
	(*obj).Categories = categories_pango_entries
	(*obj).RuleType = ruleType_value
	(*obj).LogSetting = logSetting_value
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Uuid = uuid_value
	(*obj).SourceZones = sourceZones_pango_entries
	(*obj).SourceUsers = sourceUsers_pango_entries
	(*obj).Description = description_value
	(*obj).DestinationZones = destinationZones_pango_entries

	return diags
}
func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) CopyToPango(ctx context.Context, obj **security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	group_value := o.Group.ValueStringPointer()
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}

		diags.Append(o.Profiles.CopyToPango(ctx, &profiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_value
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, obj **security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).Virus = virus_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries
	(*obj).DataFiltering = dataFiltering_pango_entries

	return diags
}

func (o *SecurityPolicyRulesResourceRulesObject) CopyFromPango(ctx context.Context, obj *security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceZones)
		diags.Append(list_diags...)
	}
	var categories_list types.List
	{
		var list_diags diag.Diagnostics
		categories_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Categories)
		diags.Append(list_diags...)
	}
	var destinationZones_list types.List
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationZones)
		diags.Append(list_diags...)
	}
	var sourceUsers_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUsers)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationAddresses)
		diags.Append(list_diags...)
	}
	var applications_list types.List
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Applications)
		diags.Append(list_diags...)
	}
	var sourceHips_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHips_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHips)
		diags.Append(list_diags...)
	}
	var destinationHips_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHips_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHips)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceAddresses)
		diags.Append(list_diags...)
	}
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Services)
		diags.Append(list_diags...)
	}
	var profileSetting_object *SecurityPolicyRulesResourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyRulesResourceRulesProfileSettingObject)

		diags.Append(profileSetting_object.CopyFromPango(ctx, obj.ProfileSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	o.Name = types.StringValue(obj.Name)
	o.ProfileSetting = profileSetting_object
	o.Uuid = uuid_value
	o.SourceZones = sourceZones_list
	o.Categories = categories_list
	o.RuleType = ruleType_value
	o.LogSetting = logSetting_value
	o.IcmpUnreachable = icmpUnreachable_value
	o.Description = description_value
	o.DestinationZones = destinationZones_list
	o.SourceUsers = sourceUsers_list
	o.Action = action_value
	o.LogStart = logStart_value
	o.DestinationAddresses = destinationAddresses_list
	o.Applications = applications_list
	o.SourceHips = sourceHips_list
	o.DestinationHips = destinationHips_list
	o.NegateSource = negateSource_value
	o.NegateDestination = negateDestination_value
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.Tags = tags_list
	o.SourceAddresses = sourceAddresses_list
	o.Services = services_list
	o.Disabled = disabled_value
	o.LogEnd = logEnd_value

	return diags
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, obj *security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var profiles_object *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyRulesResourceRulesProfileSettingProfilesObject)

		diags.Append(profiles_object.CopyFromPango(ctx, obj.Profiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var group_value types.String
	if obj.Group != nil {
		group_value = types.StringValue(*obj.Group)
	}
	o.Group = group_value
	o.Profiles = profiles_object

	return diags
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, obj *security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
	}
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
	}
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
	}
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
	}
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
	}
	o.Virus = virus_list
	o.Spyware = spyware_list
	o.Vulnerability = vulnerability_list
	o.UrlFiltering = urlFiltering_list
	o.FileBlocking = fileBlocking_list
	o.WildfireAnalysis = wildfireAnalysis_list
	o.DataFiltering = dataFiltering_list

	return diags
}

func (r *SecurityPolicyRulesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
			Rulebase:   state.Location.Vsys.Rulebase.ValueString(),
		}
	}
	if state.Location.FromPanoramaVsys != nil {
		location.FromPanoramaVsys = &security.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries[idx] = entry
	}
	position := state.Position.CopyToPango()
	processed, err := r.manager.CreateMany(ctx, location, entries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Error during CreateMany() call", err.Error())
		return
	}
	objects := make([]SecurityPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (o *SecurityPolicyRulesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state SecurityPolicyRulesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
			Rulebase:   state.Location.Vsys.Rulebase.ValueString(),
		}
	}
	if state.Location.FromPanoramaVsys != nil {
		location.FromPanoramaVsys = &security.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyRulesResourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyRulesResourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *SecurityPolicyRulesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Create",
	})

	var location security.Location

	if plan.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: plan.Location.Shared.Rulebase.ValueString(),
		}
	}
	if plan.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			Vsys:       plan.Location.Vsys.Name.ValueString(),
			Rulebase:   plan.Location.Vsys.Rulebase.ValueString(),
			NgfwDevice: plan.Location.Vsys.NgfwDevice.ValueString(),
		}
	}
	if plan.Location.FromPanoramaVsys != nil {
		location.FromPanoramaVsys = &security.FromPanoramaVsysLocation{

			Vsys: plan.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if plan.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: plan.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    plan.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       plan.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	stateEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		stateEntries[idx] = entry
	}

	position := state.Position.CopyToPango()

	existing, err := r.manager.ReadMany(ctx, location, stateEntries, sdkmanager.NonExhaustive)
	if err != nil && !sdkerrors.IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*security.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	plan.Rules.ElementsAs(ctx, &elements, false)
	planEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		entry, _ := existingEntriesByName[elt.Name.ValueString()]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		planEntries[idx] = entry
	}

	processed, err := r.manager.UpdateMany(ctx, location, stateEntries, planEntries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Failed to udpate entries", err.Error())
	}

	objects := make([]*SecurityPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = &object
	}

	var list_diags diag.Diagnostics
	plan.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}

func (r *SecurityPolicyRulesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Delete",
	})
	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
			Rulebase:   state.Location.Vsys.Rulebase.ValueString(),
		}
	}
	if state.Location.FromPanoramaVsys != nil {
		location.FromPanoramaVsys = &security.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var names []string
	for _, elt := range elements {
		names = append(names, elt.Name.ValueString())
	}
	err := r.manager.Delete(ctx, location, names, sdkmanager.NonExhaustive)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

func (r *SecurityPolicyRulesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type SecurityPolicyRulesSharedLocation struct {
	Rulebase types.String `tfsdk:"rulebase"`
}
type SecurityPolicyRulesVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
	Rulebase   types.String `tfsdk:"rulebase"`
}
type SecurityPolicyRulesFromPanoramaVsysLocation struct {
	Vsys types.String `tfsdk:"vsys"`
}
type SecurityPolicyRulesDeviceGroupLocation struct {
	Rulebase       types.String `tfsdk:"rulebase"`
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type SecurityPolicyRulesLocation struct {
	Shared           *SecurityPolicyRulesSharedLocation           `tfsdk:"shared"`
	Vsys             *SecurityPolicyRulesVsysLocation             `tfsdk:"vsys"`
	FromPanoramaVsys *SecurityPolicyRulesFromPanoramaVsysLocation `tfsdk:"from_panorama_vsys"`
	DeviceGroup      *SecurityPolicyRulesDeviceGroupLocation      `tfsdk:"device_group"`
}

func SecurityPolicyRulesLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Located in shared.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("from_panorama_vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
						path.MatchRelative().AtParent().AtName("shared"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"name": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys in the config pushed from Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
