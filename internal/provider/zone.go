package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/zone"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &ZoneDataSource{}
	_ datasource.DataSourceWithConfigure = &ZoneDataSource{}
)

func NewZoneDataSource() datasource.DataSource {
	return &ZoneDataSource{}
}

type ZoneDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*zone.Entry, zone.Location, *zone.Service]
}

type ZoneDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type ZoneDataSourceTfid struct {
	Name     string        `json:"name"`
	Location zone.Location `json:"location"`
}

func (o *ZoneDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type ZoneDataSourceModel struct {
	Tfid                       types.String                   `tfsdk:"tfid"`
	Location                   ZoneLocation                   `tfsdk:"location"`
	Name                       types.String                   `tfsdk:"name"`
	DeviceAcl                  *ZoneDataSourceDeviceAclObject `tfsdk:"device_acl"`
	Network                    *ZoneDataSourceNetworkObject   `tfsdk:"network"`
	EnableUserIdentification   types.Bool                     `tfsdk:"enable_user_identification"`
	EnableDeviceIdentification types.Bool                     `tfsdk:"enable_device_identification"`
	UserAcl                    *ZoneDataSourceUserAclObject   `tfsdk:"user_acl"`
}
type ZoneDataSourceDeviceAclObject struct {
	IncludeList types.List `tfsdk:"include_list"`
	ExcludeList types.List `tfsdk:"exclude_list"`
}
type ZoneDataSourceNetworkObject struct {
	EnablePacketBufferProtection types.Bool `tfsdk:"enable_packet_buffer_protection"`
	ZoneProtectionProfile        types.List `tfsdk:"zone_protection_profile"`
	LogSetting                   types.List `tfsdk:"log_setting"`
	Layer3                       types.List `tfsdk:"layer3"`
	Layer2                       types.List `tfsdk:"layer2"`
	VirtualWire                  types.List `tfsdk:"virtual_wire"`
	Tap                          types.List `tfsdk:"tap"`
}
type ZoneDataSourceUserAclObject struct {
	IncludeList types.List `tfsdk:"include_list"`
	ExcludeList types.List `tfsdk:"exclude_list"`
}

func (o *ZoneDataSourceModel) CopyToPango(ctx context.Context, obj **zone.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	enableUserIdentification_value := o.EnableUserIdentification.ValueBoolPointer()
	enableDeviceIdentification_value := o.EnableDeviceIdentification.ValueBoolPointer()
	var userAcl_entry *zone.UserAcl
	if o.UserAcl != nil {
		if *obj != nil && (*obj).UserAcl != nil {
			userAcl_entry = (*obj).UserAcl
		} else {
			userAcl_entry = new(zone.UserAcl)
		}

		diags.Append(o.UserAcl.CopyToPango(ctx, &userAcl_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var deviceAcl_entry *zone.DeviceAcl
	if o.DeviceAcl != nil {
		if *obj != nil && (*obj).DeviceAcl != nil {
			deviceAcl_entry = (*obj).DeviceAcl
		} else {
			deviceAcl_entry = new(zone.DeviceAcl)
		}

		diags.Append(o.DeviceAcl.CopyToPango(ctx, &deviceAcl_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *zone.Network
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(zone.Network)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(zone.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).EnableUserIdentification = enableUserIdentification_value
	(*obj).EnableDeviceIdentification = enableDeviceIdentification_value
	(*obj).UserAcl = userAcl_entry
	(*obj).DeviceAcl = deviceAcl_entry
	(*obj).Network = network_entry

	return diags
}
func (o *ZoneDataSourceUserAclObject) CopyToPango(ctx context.Context, obj **zone.UserAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.UserAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}
func (o *ZoneDataSourceDeviceAclObject) CopyToPango(ctx context.Context, obj **zone.DeviceAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.DeviceAcl)
	}
	(*obj).IncludeList = includeList_pango_entries
	(*obj).ExcludeList = excludeList_pango_entries

	return diags
}
func (o *ZoneDataSourceNetworkObject) CopyToPango(ctx context.Context, obj **zone.Network, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	zoneProtectionProfile_pango_entries := make([]string, 0)
	diags.Append(o.ZoneProtectionProfile.ElementsAs(ctx, &zoneProtectionProfile_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSetting_pango_entries := make([]string, 0)
	diags.Append(o.LogSetting.ElementsAs(ctx, &logSetting_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	enablePacketBufferProtection_value := o.EnablePacketBufferProtection.ValueBoolPointer()
	layer3_pango_entries := make([]string, 0)
	diags.Append(o.Layer3.ElementsAs(ctx, &layer3_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer2_pango_entries := make([]string, 0)
	diags.Append(o.Layer2.ElementsAs(ctx, &layer2_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virtualWire_pango_entries := make([]string, 0)
	diags.Append(o.VirtualWire.ElementsAs(ctx, &virtualWire_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tap_pango_entries := make([]string, 0)
	diags.Append(o.Tap.ElementsAs(ctx, &tap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.Network)
	}
	(*obj).ZoneProtectionProfile = zoneProtectionProfile_pango_entries
	(*obj).LogSetting = logSetting_pango_entries
	(*obj).EnablePacketBufferProtection = enablePacketBufferProtection_value
	(*obj).Layer3 = layer3_pango_entries
	(*obj).Layer2 = layer2_pango_entries
	(*obj).VirtualWire = virtualWire_pango_entries
	(*obj).Tap = tap_pango_entries

	return diags
}

func (o *ZoneDataSourceModel) CopyFromPango(ctx context.Context, obj *zone.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var network_object *ZoneDataSourceNetworkObject
	if obj.Network != nil {
		network_object = new(ZoneDataSourceNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var userAcl_object *ZoneDataSourceUserAclObject
	if obj.UserAcl != nil {
		userAcl_object = new(ZoneDataSourceUserAclObject)

		diags.Append(userAcl_object.CopyFromPango(ctx, obj.UserAcl, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var deviceAcl_object *ZoneDataSourceDeviceAclObject
	if obj.DeviceAcl != nil {
		deviceAcl_object = new(ZoneDataSourceDeviceAclObject)

		diags.Append(deviceAcl_object.CopyFromPango(ctx, obj.DeviceAcl, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var enableUserIdentification_value types.Bool
	if obj.EnableUserIdentification != nil {
		enableUserIdentification_value = types.BoolValue(*obj.EnableUserIdentification)
	}
	var enableDeviceIdentification_value types.Bool
	if obj.EnableDeviceIdentification != nil {
		enableDeviceIdentification_value = types.BoolValue(*obj.EnableDeviceIdentification)
	}
	o.Name = types.StringValue(obj.Name)
	o.Network = network_object
	o.EnableUserIdentification = enableUserIdentification_value
	o.EnableDeviceIdentification = enableDeviceIdentification_value
	o.UserAcl = userAcl_object
	o.DeviceAcl = deviceAcl_object

	return diags
}

func (o *ZoneDataSourceUserAclObject) CopyFromPango(ctx context.Context, obj *zone.UserAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
	}
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
	}
	o.IncludeList = includeList_list
	o.ExcludeList = excludeList_list

	return diags
}

func (o *ZoneDataSourceDeviceAclObject) CopyFromPango(ctx context.Context, obj *zone.DeviceAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
	}
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
	}
	o.IncludeList = includeList_list
	o.ExcludeList = excludeList_list

	return diags
}

func (o *ZoneDataSourceNetworkObject) CopyFromPango(ctx context.Context, obj *zone.Network, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var logSetting_list types.List
	{
		var list_diags diag.Diagnostics
		logSetting_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.LogSetting)
		diags.Append(list_diags...)
	}
	var zoneProtectionProfile_list types.List
	{
		var list_diags diag.Diagnostics
		zoneProtectionProfile_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ZoneProtectionProfile)
		diags.Append(list_diags...)
	}
	var layer2_list types.List
	{
		var list_diags diag.Diagnostics
		layer2_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer2)
		diags.Append(list_diags...)
	}
	var virtualWire_list types.List
	{
		var list_diags diag.Diagnostics
		virtualWire_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.VirtualWire)
		diags.Append(list_diags...)
	}
	var tap_list types.List
	{
		var list_diags diag.Diagnostics
		tap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tap)
		diags.Append(list_diags...)
	}
	var layer3_list types.List
	{
		var list_diags diag.Diagnostics
		layer3_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer3)
		diags.Append(list_diags...)
	}
	var enablePacketBufferProtection_value types.Bool
	if obj.EnablePacketBufferProtection != nil {
		enablePacketBufferProtection_value = types.BoolValue(*obj.EnablePacketBufferProtection)
	}
	o.LogSetting = logSetting_list
	o.EnablePacketBufferProtection = enablePacketBufferProtection_value
	o.ZoneProtectionProfile = zoneProtectionProfile_list
	o.Layer2 = layer2_list
	o.VirtualWire = virtualWire_list
	o.Tap = tap_list
	o.Layer3 = layer3_list

	return diags
}

func ZoneDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": ZoneDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": dsschema.StringAttribute{
				Description: "The name of the zone.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable_user_identification": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_device_identification": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_acl": ZoneDataSourceUserAclSchema(),

			"device_acl": ZoneDataSourceDeviceAclSchema(),

			"network": ZoneDataSourceNetworkSchema(),
		},
	}
}

func (o *ZoneDataSourceModel) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceUserAclSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"include_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"exclude_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceUserAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceUserAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceDeviceAclSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"include_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"exclude_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceDeviceAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceDeviceAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable_packet_buffer_protection": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_profile": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_setting": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"layer3": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("layer3"),
						path.MatchRelative().AtParent().AtName("layer2"),
						path.MatchRelative().AtParent().AtName("virtual_wire"),
						path.MatchRelative().AtParent().AtName("tap"),
					}...),
				},
			},

			"layer2": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virtual_wire": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tap": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceNetworkObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceLocationSchema() rsschema.Attribute {
	return ZoneLocationSchema()
}

// Metadata returns the data source type name.
func (d *ZoneDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

// Schema defines the schema for this data source.
func (d *ZoneDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = ZoneDataSourceSchema()
}

// Configure prepares the struct.
func (d *ZoneDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := zone.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, zone.NewService(d.client), specifier, zone.SpecMatches)
}

func (o *ZoneDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state ZoneDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc ZoneDataSourceTfid
	loc.Name = *savestate.Name.ValueStringPointer()

	if savestate.Location.Template != nil {
		loc.Location.Template = &zone.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.Template.Vsys.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &zone.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.TemplateStack.Vsys.ValueString(),
		}
	}
	if savestate.Location.Vsys != nil {
		loc.Location.Vsys = &zone.VsysLocation{

			NgfwDevice: savestate.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       savestate.Location.Vsys.Name.ValueString(),
		}
	}
	if savestate.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &zone.FromPanoramaVsysLocation{

			Vsys: savestate.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &ZoneResource{}
	_ resource.ResourceWithConfigure   = &ZoneResource{}
	_ resource.ResourceWithImportState = &ZoneResource{}
)

func NewZoneResource() resource.Resource {
	return &ZoneResource{}
}

type ZoneResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*zone.Entry, zone.Location, *zone.Service]
}
type ZoneResourceTfid struct {
	Name     string        `json:"name"`
	Location zone.Location `json:"location"`
}

func (o *ZoneResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func ZoneResourceLocationSchema() rsschema.Attribute {
	return ZoneLocationSchema()
}

type ZoneResourceModel struct {
	Tfid                       types.String                 `tfsdk:"tfid"`
	Location                   ZoneLocation                 `tfsdk:"location"`
	Name                       types.String                 `tfsdk:"name"`
	EnableUserIdentification   types.Bool                   `tfsdk:"enable_user_identification"`
	EnableDeviceIdentification types.Bool                   `tfsdk:"enable_device_identification"`
	UserAcl                    *ZoneResourceUserAclObject   `tfsdk:"user_acl"`
	DeviceAcl                  *ZoneResourceDeviceAclObject `tfsdk:"device_acl"`
	Network                    *ZoneResourceNetworkObject   `tfsdk:"network"`
}
type ZoneResourceUserAclObject struct {
	IncludeList types.List `tfsdk:"include_list"`
	ExcludeList types.List `tfsdk:"exclude_list"`
}
type ZoneResourceDeviceAclObject struct {
	IncludeList types.List `tfsdk:"include_list"`
	ExcludeList types.List `tfsdk:"exclude_list"`
}
type ZoneResourceNetworkObject struct {
	EnablePacketBufferProtection types.Bool `tfsdk:"enable_packet_buffer_protection"`
	ZoneProtectionProfile        types.List `tfsdk:"zone_protection_profile"`
	LogSetting                   types.List `tfsdk:"log_setting"`
	Layer3                       types.List `tfsdk:"layer3"`
	Layer2                       types.List `tfsdk:"layer2"`
	VirtualWire                  types.List `tfsdk:"virtual_wire"`
	Tap                          types.List `tfsdk:"tap"`
}

func (r *ZoneResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

func (r *ZoneResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func ZoneResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": ZoneResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": rsschema.StringAttribute{
				Description: "The name of the zone.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable_device_identification": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_acl": ZoneResourceUserAclSchema(),

			"device_acl": ZoneResourceDeviceAclSchema(),

			"network": ZoneResourceNetworkSchema(),

			"enable_user_identification": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ZoneResourceModel) getTypeFor(name string) attr.Type {
	schema := ZoneResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceUserAclSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"include_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"exclude_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceUserAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceUserAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceDeviceAclSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"include_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"exclude_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceDeviceAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceDeviceAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable_packet_buffer_protection": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_profile": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_setting": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"layer3": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("layer3"),
						path.MatchRelative().AtParent().AtName("layer2"),
						path.MatchRelative().AtParent().AtName("virtual_wire"),
						path.MatchRelative().AtParent().AtName("tap"),
					}...),
				},
			},

			"layer2": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virtual_wire": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tap": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceNetworkObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *ZoneResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ZoneResourceSchema()
}

// </ResourceSchema>

func (r *ZoneResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := zone.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, zone.NewService(r.client), specifier, zone.SpecMatches)
}

func (o *ZoneResourceModel) CopyToPango(ctx context.Context, obj **zone.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var deviceAcl_entry *zone.DeviceAcl
	if o.DeviceAcl != nil {
		if *obj != nil && (*obj).DeviceAcl != nil {
			deviceAcl_entry = (*obj).DeviceAcl
		} else {
			deviceAcl_entry = new(zone.DeviceAcl)
		}

		diags.Append(o.DeviceAcl.CopyToPango(ctx, &deviceAcl_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *zone.Network
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(zone.Network)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	enableUserIdentification_value := o.EnableUserIdentification.ValueBoolPointer()
	enableDeviceIdentification_value := o.EnableDeviceIdentification.ValueBoolPointer()
	var userAcl_entry *zone.UserAcl
	if o.UserAcl != nil {
		if *obj != nil && (*obj).UserAcl != nil {
			userAcl_entry = (*obj).UserAcl
		} else {
			userAcl_entry = new(zone.UserAcl)
		}

		diags.Append(o.UserAcl.CopyToPango(ctx, &userAcl_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(zone.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DeviceAcl = deviceAcl_entry
	(*obj).Network = network_entry
	(*obj).EnableUserIdentification = enableUserIdentification_value
	(*obj).EnableDeviceIdentification = enableDeviceIdentification_value
	(*obj).UserAcl = userAcl_entry

	return diags
}
func (o *ZoneResourceUserAclObject) CopyToPango(ctx context.Context, obj **zone.UserAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.UserAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}
func (o *ZoneResourceDeviceAclObject) CopyToPango(ctx context.Context, obj **zone.DeviceAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.DeviceAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}
func (o *ZoneResourceNetworkObject) CopyToPango(ctx context.Context, obj **zone.Network, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	enablePacketBufferProtection_value := o.EnablePacketBufferProtection.ValueBoolPointer()
	zoneProtectionProfile_pango_entries := make([]string, 0)
	diags.Append(o.ZoneProtectionProfile.ElementsAs(ctx, &zoneProtectionProfile_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSetting_pango_entries := make([]string, 0)
	diags.Append(o.LogSetting.ElementsAs(ctx, &logSetting_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer3_pango_entries := make([]string, 0)
	diags.Append(o.Layer3.ElementsAs(ctx, &layer3_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer2_pango_entries := make([]string, 0)
	diags.Append(o.Layer2.ElementsAs(ctx, &layer2_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virtualWire_pango_entries := make([]string, 0)
	diags.Append(o.VirtualWire.ElementsAs(ctx, &virtualWire_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tap_pango_entries := make([]string, 0)
	diags.Append(o.Tap.ElementsAs(ctx, &tap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.Network)
	}
	(*obj).EnablePacketBufferProtection = enablePacketBufferProtection_value
	(*obj).ZoneProtectionProfile = zoneProtectionProfile_pango_entries
	(*obj).LogSetting = logSetting_pango_entries
	(*obj).Layer3 = layer3_pango_entries
	(*obj).Layer2 = layer2_pango_entries
	(*obj).VirtualWire = virtualWire_pango_entries
	(*obj).Tap = tap_pango_entries

	return diags
}

func (o *ZoneResourceModel) CopyFromPango(ctx context.Context, obj *zone.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var userAcl_object *ZoneResourceUserAclObject
	if obj.UserAcl != nil {
		userAcl_object = new(ZoneResourceUserAclObject)

		diags.Append(userAcl_object.CopyFromPango(ctx, obj.UserAcl, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var deviceAcl_object *ZoneResourceDeviceAclObject
	if obj.DeviceAcl != nil {
		deviceAcl_object = new(ZoneResourceDeviceAclObject)

		diags.Append(deviceAcl_object.CopyFromPango(ctx, obj.DeviceAcl, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *ZoneResourceNetworkObject
	if obj.Network != nil {
		network_object = new(ZoneResourceNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var enableUserIdentification_value types.Bool
	if obj.EnableUserIdentification != nil {
		enableUserIdentification_value = types.BoolValue(*obj.EnableUserIdentification)
	}
	var enableDeviceIdentification_value types.Bool
	if obj.EnableDeviceIdentification != nil {
		enableDeviceIdentification_value = types.BoolValue(*obj.EnableDeviceIdentification)
	}
	o.Name = types.StringValue(obj.Name)
	o.EnableUserIdentification = enableUserIdentification_value
	o.EnableDeviceIdentification = enableDeviceIdentification_value
	o.UserAcl = userAcl_object
	o.DeviceAcl = deviceAcl_object
	o.Network = network_object

	return diags
}

func (o *ZoneResourceUserAclObject) CopyFromPango(ctx context.Context, obj *zone.UserAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
	}
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
	}
	o.IncludeList = includeList_list
	o.ExcludeList = excludeList_list

	return diags
}

func (o *ZoneResourceDeviceAclObject) CopyFromPango(ctx context.Context, obj *zone.DeviceAcl, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
	}
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
	}
	o.IncludeList = includeList_list
	o.ExcludeList = excludeList_list

	return diags
}

func (o *ZoneResourceNetworkObject) CopyFromPango(ctx context.Context, obj *zone.Network, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var zoneProtectionProfile_list types.List
	{
		var list_diags diag.Diagnostics
		zoneProtectionProfile_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ZoneProtectionProfile)
		diags.Append(list_diags...)
	}
	var logSetting_list types.List
	{
		var list_diags diag.Diagnostics
		logSetting_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.LogSetting)
		diags.Append(list_diags...)
	}
	var virtualWire_list types.List
	{
		var list_diags diag.Diagnostics
		virtualWire_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.VirtualWire)
		diags.Append(list_diags...)
	}
	var tap_list types.List
	{
		var list_diags diag.Diagnostics
		tap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tap)
		diags.Append(list_diags...)
	}
	var layer3_list types.List
	{
		var list_diags diag.Diagnostics
		layer3_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer3)
		diags.Append(list_diags...)
	}
	var layer2_list types.List
	{
		var list_diags diag.Diagnostics
		layer2_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer2)
		diags.Append(list_diags...)
	}
	var enablePacketBufferProtection_value types.Bool
	if obj.EnablePacketBufferProtection != nil {
		enablePacketBufferProtection_value = types.BoolValue(*obj.EnablePacketBufferProtection)
	}
	o.EnablePacketBufferProtection = enablePacketBufferProtection_value
	o.ZoneProtectionProfile = zoneProtectionProfile_list
	o.LogSetting = logSetting_list
	o.VirtualWire = virtualWire_list
	o.Tap = tap_list
	o.Layer3 = layer3_list
	o.Layer2 = layer2_list

	return diags
}

func (r *ZoneResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ZoneResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := ZoneResourceTfid{Name: state.Name.ValueString()}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if state.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &zone.TemplateStackLocation{

			Vsys:           state.Location.TemplateStack.Vsys.ValueString(),
			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		loc.Location.Vsys = &zone.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &zone.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.Template != nil {
		loc.Location.Template = &zone.TemplateLocation{

			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
			Vsys:           state.Location.Template.Vsys.ValueString(),
			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
		}
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *zone.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *ZoneResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc ZoneResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *ZoneResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc ZoneResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	loc.Name = obj.Name
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *ZoneResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc ZoneResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Delete",
		"name":          loc.Name,
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	err := r.manager.Delete(ctx, loc.Location, []string{loc.Name})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *ZoneResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type ZoneVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type ZoneFromPanoramaVsysLocation struct {
	Vsys types.String `tfsdk:"vsys"`
}
type ZoneTemplateLocation struct {
	Vsys           types.String `tfsdk:"vsys"`
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type ZoneTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type ZoneLocation struct {
	Vsys             *ZoneVsysLocation             `tfsdk:"vsys"`
	FromPanoramaVsys *ZoneFromPanoramaVsysLocation `tfsdk:"from_panorama_vsys"`
	Template         *ZoneTemplateLocation         `tfsdk:"template"`
	TemplateStack    *ZoneTemplateStackLocation    `tfsdk:"template_stack"`
}

func ZoneLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"name": rsschema.StringAttribute{
						Description: "The template stack.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("from_panorama_vsys"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys in the config pushed from Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
