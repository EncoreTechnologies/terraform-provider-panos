package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/panorama/template_stack"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &TemplateStackDataSource{}
	_ datasource.DataSourceWithConfigure = &TemplateStackDataSource{}
)

func NewTemplateStackDataSource() datasource.DataSource {
	return &TemplateStackDataSource{}
}

type TemplateStackDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*template_stack.Entry, template_stack.Location, *template_stack.Service]
}

type TemplateStackDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type TemplateStackDataSourceTfid struct {
	Name     string                  `json:"name"`
	Location template_stack.Location `json:"location"`
}

func (o *TemplateStackDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type TemplateStackDataSourceModel struct {
	Tfid            types.String                                  `tfsdk:"tfid"`
	Location        TemplateStackLocation                         `tfsdk:"location"`
	Name            types.String                                  `tfsdk:"name"`
	Description     types.String                                  `tfsdk:"description"`
	Templates       types.List                                    `tfsdk:"templates"`
	Devices         types.List                                    `tfsdk:"devices"`
	DefaultVsys     types.String                                  `tfsdk:"default_vsys"`
	UserGroupSource *TemplateStackDataSourceUserGroupSourceObject `tfsdk:"user_group_source"`
}
type TemplateStackDataSourceUserGroupSourceObject struct {
	MasterDevice types.String `tfsdk:"master_device"`
}

func (o *TemplateStackDataSourceModel) CopyToPango(ctx context.Context, obj **template_stack.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	templates_pango_entries := make([]string, 0)
	diags.Append(o.Templates.ElementsAs(ctx, &templates_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	devices_pango_entries := make([]string, 0)
	diags.Append(o.Devices.ElementsAs(ctx, &devices_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	defaultVsys_value := o.DefaultVsys.ValueStringPointer()
	var userGroupSource_entry *template_stack.UserGroupSource
	if o.UserGroupSource != nil {
		if *obj != nil && (*obj).UserGroupSource != nil {
			userGroupSource_entry = (*obj).UserGroupSource
		} else {
			userGroupSource_entry = new(template_stack.UserGroupSource)
		}

		diags.Append(o.UserGroupSource.CopyToPango(ctx, &userGroupSource_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(template_stack.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).Templates = templates_pango_entries
	(*obj).Devices = devices_pango_entries
	(*obj).DefaultVsys = defaultVsys_value
	(*obj).UserGroupSource = userGroupSource_entry

	return diags
}
func (o *TemplateStackDataSourceUserGroupSourceObject) CopyToPango(ctx context.Context, obj **template_stack.UserGroupSource, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	masterDevice_value := o.MasterDevice.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(template_stack.UserGroupSource)
	}
	(*obj).MasterDevice = masterDevice_value

	return diags
}

func (o *TemplateStackDataSourceModel) CopyFromPango(ctx context.Context, obj *template_stack.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var templates_list types.List
	{
		var list_diags diag.Diagnostics
		templates_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Templates)
		diags.Append(list_diags...)
	}
	var devices_list types.List
	{
		var list_diags diag.Diagnostics
		devices_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Devices)
		diags.Append(list_diags...)
	}
	var userGroupSource_object *TemplateStackDataSourceUserGroupSourceObject
	if obj.UserGroupSource != nil {
		userGroupSource_object = new(TemplateStackDataSourceUserGroupSourceObject)

		diags.Append(userGroupSource_object.CopyFromPango(ctx, obj.UserGroupSource, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var defaultVsys_value types.String
	if obj.DefaultVsys != nil {
		defaultVsys_value = types.StringValue(*obj.DefaultVsys)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Templates = templates_list
	o.Devices = devices_list
	o.DefaultVsys = defaultVsys_value
	o.UserGroupSource = userGroupSource_object
	o.Description = description_value

	return diags
}

func (o *TemplateStackDataSourceUserGroupSourceObject) CopyFromPango(ctx context.Context, obj *template_stack.UserGroupSource, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var masterDevice_value types.String
	if obj.MasterDevice != nil {
		masterDevice_value = types.StringValue(*obj.MasterDevice)
	}
	o.MasterDevice = masterDevice_value

	return diags
}

func TemplateStackDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": TemplateStackDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": dsschema.StringAttribute{
				Description: "The name of the service.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"default_vsys": dsschema.StringAttribute{
				Description: "Default virtual system",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_group_source": TemplateStackDataSourceUserGroupSourceSchema(),

			"description": dsschema.StringAttribute{
				Description: "The description.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"templates": dsschema.ListAttribute{
				Description: "List of templates",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"devices": dsschema.ListAttribute{
				Description: "List of devices",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *TemplateStackDataSourceModel) getTypeFor(name string) attr.Type {
	schema := TemplateStackDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func TemplateStackDataSourceUserGroupSourceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"master_device": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *TemplateStackDataSourceUserGroupSourceObject) getTypeFor(name string) attr.Type {
	schema := TemplateStackDataSourceUserGroupSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func TemplateStackDataSourceLocationSchema() rsschema.Attribute {
	return TemplateStackLocationSchema()
}

// Metadata returns the data source type name.
func (d *TemplateStackDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_template_stack"
}

// Schema defines the schema for this data source.
func (d *TemplateStackDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = TemplateStackDataSourceSchema()
}

// Configure prepares the struct.
func (d *TemplateStackDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := template_stack.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, template_stack.NewService(d.client), specifier, template_stack.SpecMatches)
}

func (o *TemplateStackDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state TemplateStackDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc TemplateStackDataSourceTfid
	loc.Name = *savestate.Name.ValueStringPointer()

	if savestate.Location.Panorama != nil {
		loc.Location.Panorama = &template_stack.PanoramaLocation{

			PanoramaDevice: savestate.Location.Panorama.PanoramaDevice.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_template_stack_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &TemplateStackResource{}
	_ resource.ResourceWithConfigure   = &TemplateStackResource{}
	_ resource.ResourceWithImportState = &TemplateStackResource{}
)

func NewTemplateStackResource() resource.Resource {
	return &TemplateStackResource{}
}

type TemplateStackResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*template_stack.Entry, template_stack.Location, *template_stack.Service]
}
type TemplateStackResourceTfid struct {
	Name     string                  `json:"name"`
	Location template_stack.Location `json:"location"`
}

func (o *TemplateStackResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func TemplateStackResourceLocationSchema() rsschema.Attribute {
	return TemplateStackLocationSchema()
}

type TemplateStackResourceModel struct {
	Tfid            types.String                                `tfsdk:"tfid"`
	Location        TemplateStackLocation                       `tfsdk:"location"`
	Name            types.String                                `tfsdk:"name"`
	Description     types.String                                `tfsdk:"description"`
	Templates       types.List                                  `tfsdk:"templates"`
	Devices         types.List                                  `tfsdk:"devices"`
	DefaultVsys     types.String                                `tfsdk:"default_vsys"`
	UserGroupSource *TemplateStackResourceUserGroupSourceObject `tfsdk:"user_group_source"`
}
type TemplateStackResourceUserGroupSourceObject struct {
	MasterDevice types.String `tfsdk:"master_device"`
}

func (r *TemplateStackResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_template_stack"
}

func (r *TemplateStackResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func TemplateStackResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": TemplateStackResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": rsschema.StringAttribute{
				Description: "The name of the service.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"default_vsys": rsschema.StringAttribute{
				Description: "Default virtual system",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_group_source": TemplateStackResourceUserGroupSourceSchema(),

			"description": rsschema.StringAttribute{
				Description: "The description.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"templates": rsschema.ListAttribute{
				Description: "List of templates",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"devices": rsschema.ListAttribute{
				Description: "List of devices",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *TemplateStackResourceModel) getTypeFor(name string) attr.Type {
	schema := TemplateStackResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func TemplateStackResourceUserGroupSourceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"master_device": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *TemplateStackResourceUserGroupSourceObject) getTypeFor(name string) attr.Type {
	schema := TemplateStackResourceUserGroupSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *TemplateStackResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = TemplateStackResourceSchema()
}

// </ResourceSchema>

func (r *TemplateStackResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := template_stack.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, template_stack.NewService(r.client), specifier, template_stack.SpecMatches)
}

func (o *TemplateStackResourceModel) CopyToPango(ctx context.Context, obj **template_stack.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	templates_pango_entries := make([]string, 0)
	diags.Append(o.Templates.ElementsAs(ctx, &templates_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	devices_pango_entries := make([]string, 0)
	diags.Append(o.Devices.ElementsAs(ctx, &devices_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	defaultVsys_value := o.DefaultVsys.ValueStringPointer()
	var userGroupSource_entry *template_stack.UserGroupSource
	if o.UserGroupSource != nil {
		if *obj != nil && (*obj).UserGroupSource != nil {
			userGroupSource_entry = (*obj).UserGroupSource
		} else {
			userGroupSource_entry = new(template_stack.UserGroupSource)
		}

		diags.Append(o.UserGroupSource.CopyToPango(ctx, &userGroupSource_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	description_value := o.Description.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(template_stack.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Templates = templates_pango_entries
	(*obj).Devices = devices_pango_entries
	(*obj).DefaultVsys = defaultVsys_value
	(*obj).UserGroupSource = userGroupSource_entry
	(*obj).Description = description_value

	return diags
}
func (o *TemplateStackResourceUserGroupSourceObject) CopyToPango(ctx context.Context, obj **template_stack.UserGroupSource, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	masterDevice_value := o.MasterDevice.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(template_stack.UserGroupSource)
	}
	(*obj).MasterDevice = masterDevice_value

	return diags
}

func (o *TemplateStackResourceModel) CopyFromPango(ctx context.Context, obj *template_stack.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var templates_list types.List
	{
		var list_diags diag.Diagnostics
		templates_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Templates)
		diags.Append(list_diags...)
	}
	var devices_list types.List
	{
		var list_diags diag.Diagnostics
		devices_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Devices)
		diags.Append(list_diags...)
	}
	var userGroupSource_object *TemplateStackResourceUserGroupSourceObject
	if obj.UserGroupSource != nil {
		userGroupSource_object = new(TemplateStackResourceUserGroupSourceObject)

		diags.Append(userGroupSource_object.CopyFromPango(ctx, obj.UserGroupSource, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var defaultVsys_value types.String
	if obj.DefaultVsys != nil {
		defaultVsys_value = types.StringValue(*obj.DefaultVsys)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Templates = templates_list
	o.Devices = devices_list
	o.DefaultVsys = defaultVsys_value
	o.UserGroupSource = userGroupSource_object

	return diags
}

func (o *TemplateStackResourceUserGroupSourceObject) CopyFromPango(ctx context.Context, obj *template_stack.UserGroupSource, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var masterDevice_value types.String
	if obj.MasterDevice != nil {
		masterDevice_value = types.StringValue(*obj.MasterDevice)
	}
	o.MasterDevice = masterDevice_value

	return diags
}

func (r *TemplateStackResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state TemplateStackResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_template_stack_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := TemplateStackResourceTfid{Name: state.Name.ValueString()}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if state.Location.Panorama != nil {
		loc.Location.Panorama = &template_stack.PanoramaLocation{

			PanoramaDevice: state.Location.Panorama.PanoramaDevice.ValueString(),
		}
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *template_stack.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *TemplateStackResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state TemplateStackResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc TemplateStackResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_template_stack_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *TemplateStackResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state TemplateStackResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc TemplateStackResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_template_stack_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	loc.Name = obj.Name
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *TemplateStackResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state TemplateStackResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc TemplateStackResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_template_stack_resource",
		"function":      "Delete",
		"name":          loc.Name,
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	err := r.manager.Delete(ctx, loc.Location, []string{loc.Name})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *TemplateStackResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type TemplateStackPanoramaLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
}
type TemplateStackLocation struct {
	Panorama *TemplateStackPanoramaLocation `tfsdk:"panorama"`
}

func TemplateStackLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The Panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
