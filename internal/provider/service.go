package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/service"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &ServiceDataSource{}
	_ datasource.DataSourceWithConfigure = &ServiceDataSource{}
)

func NewServiceDataSource() datasource.DataSource {
	return &ServiceDataSource{}
}

type ServiceDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*service.Entry, service.Location, *service.Service]
}

type ServiceDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type ServiceDataSourceTfid struct {
	Name     string           `json:"name"`
	Location service.Location `json:"location"`
}

func (o *ServiceDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type ServiceDataSourceModel struct {
	Tfid        types.String                     `tfsdk:"tfid"`
	Location    ServiceLocation                  `tfsdk:"location"`
	Name        types.String                     `tfsdk:"name"`
	Description types.String                     `tfsdk:"description"`
	Tags        types.List                       `tfsdk:"tags"`
	Protocol    *ServiceDataSourceProtocolObject `tfsdk:"protocol"`
}
type ServiceDataSourceProtocolObject struct {
	Tcp *ServiceDataSourceProtocolTcpObject `tfsdk:"tcp"`
	Udp *ServiceDataSourceProtocolUdpObject `tfsdk:"udp"`
}
type ServiceDataSourceProtocolTcpObject struct {
	SourcePort      types.Int64                                 `tfsdk:"source_port"`
	Override        *ServiceDataSourceProtocolTcpOverrideObject `tfsdk:"override"`
	DestinationPort types.Int64                                 `tfsdk:"destination_port"`
}
type ServiceDataSourceProtocolTcpOverrideObject struct {
	Timeout          types.Int64 `tfsdk:"timeout"`
	HalfcloseTimeout types.Int64 `tfsdk:"halfclose_timeout"`
	TimewaitTimeout  types.Int64 `tfsdk:"timewait_timeout"`
}
type ServiceDataSourceProtocolUdpObject struct {
	Override        *ServiceDataSourceProtocolUdpOverrideObject `tfsdk:"override"`
	DestinationPort types.Int64                                 `tfsdk:"destination_port"`
	SourcePort      types.Int64                                 `tfsdk:"source_port"`
}
type ServiceDataSourceProtocolUdpOverrideObject struct {
	Yes *ServiceDataSourceProtocolUdpOverrideYesObject `tfsdk:"yes"`
	No  types.String                                   `tfsdk:"no"`
}
type ServiceDataSourceProtocolUdpOverrideYesObject struct {
	Timeout types.Int64 `tfsdk:"timeout"`
}

func (o *ServiceDataSourceModel) CopyToPango(ctx context.Context, obj **service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var protocol_entry *service.Protocol
	if o.Protocol != nil {
		if *obj != nil && (*obj).Protocol != nil {
			protocol_entry = (*obj).Protocol
		} else {
			protocol_entry = new(service.Protocol)
		}

		diags.Append(o.Protocol.CopyToPango(ctx, &protocol_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).Tags = tags_pango_entries
	(*obj).Protocol = protocol_entry

	return diags
}
func (o *ServiceDataSourceProtocolObject) CopyToPango(ctx context.Context, obj **service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_entry *service.ProtocolTcp
	if o.Tcp != nil {
		if *obj != nil && (*obj).Tcp != nil {
			tcp_entry = (*obj).Tcp
		} else {
			tcp_entry = new(service.ProtocolTcp)
		}

		diags.Append(o.Tcp.CopyToPango(ctx, &tcp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_entry *service.ProtocolUdp
	if o.Udp != nil {
		if *obj != nil && (*obj).Udp != nil {
			udp_entry = (*obj).Udp
		} else {
			udp_entry = new(service.ProtocolUdp)
		}

		diags.Append(o.Udp.CopyToPango(ctx, &udp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Protocol)
	}
	(*obj).Tcp = tcp_entry
	(*obj).Udp = udp_entry

	return diags
}
func (o *ServiceDataSourceProtocolTcpObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueInt64Pointer()
	sourcePort_value := o.SourcePort.ValueInt64Pointer()
	var override_entry *service.ProtocolTcpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolTcpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolTcp)
	}
	(*obj).DestinationPort = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceDataSourceProtocolTcpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timeout_value := o.Timeout.ValueInt64Pointer()
	halfcloseTimeout_value := o.HalfcloseTimeout.ValueInt64Pointer()
	timewaitTimeout_value := o.TimewaitTimeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolTcpOverride)
	}
	(*obj).Timeout = timeout_value
	(*obj).HalfcloseTimeout = halfcloseTimeout_value
	(*obj).TimewaitTimeout = timewaitTimeout_value

	return diags
}
func (o *ServiceDataSourceProtocolUdpObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueInt64Pointer()
	sourcePort_value := o.SourcePort.ValueInt64Pointer()
	var override_entry *service.ProtocolUdpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolUdpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolUdp)
	}
	(*obj).DestinationPort = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceDataSourceProtocolUdpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var yes_entry *service.ProtocolUdpOverrideYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(service.ProtocolUdpOverrideYes)
		}

		diags.Append(o.Yes.CopyToPango(ctx, &yes_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	no_value := o.No.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverride)
	}
	(*obj).Yes = yes_entry
	(*obj).No = no_value

	return diags
}
func (o *ServiceDataSourceProtocolUdpOverrideYesObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverrideYes, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timeout_value := o.Timeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverrideYes)
	}
	(*obj).Timeout = timeout_value

	return diags
}

func (o *ServiceDataSourceModel) CopyFromPango(ctx context.Context, obj *service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var protocol_object *ServiceDataSourceProtocolObject
	if obj.Protocol != nil {
		protocol_object = new(ServiceDataSourceProtocolObject)

		diags.Append(protocol_object.CopyFromPango(ctx, obj.Protocol, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Tags = tags_list
	o.Protocol = protocol_object

	return diags
}

func (o *ServiceDataSourceProtocolObject) CopyFromPango(ctx context.Context, obj *service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_object *ServiceDataSourceProtocolTcpObject
	if obj.Tcp != nil {
		tcp_object = new(ServiceDataSourceProtocolTcpObject)

		diags.Append(tcp_object.CopyFromPango(ctx, obj.Tcp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_object *ServiceDataSourceProtocolUdpObject
	if obj.Udp != nil {
		udp_object = new(ServiceDataSourceProtocolUdpObject)

		diags.Append(udp_object.CopyFromPango(ctx, obj.Udp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.Tcp = tcp_object
	o.Udp = udp_object

	return diags
}

func (o *ServiceDataSourceProtocolTcpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceDataSourceProtocolTcpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceDataSourceProtocolTcpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationPort_value types.Int64
	if obj.DestinationPort != nil {
		destinationPort_value = types.Int64Value(*obj.DestinationPort)
	}
	var sourcePort_value types.Int64
	if obj.SourcePort != nil {
		sourcePort_value = types.Int64Value(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceDataSourceProtocolTcpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	var halfcloseTimeout_value types.Int64
	if obj.HalfcloseTimeout != nil {
		halfcloseTimeout_value = types.Int64Value(*obj.HalfcloseTimeout)
	}
	var timewaitTimeout_value types.Int64
	if obj.TimewaitTimeout != nil {
		timewaitTimeout_value = types.Int64Value(*obj.TimewaitTimeout)
	}
	o.Timeout = timeout_value
	o.HalfcloseTimeout = halfcloseTimeout_value
	o.TimewaitTimeout = timewaitTimeout_value

	return diags
}

func (o *ServiceDataSourceProtocolUdpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceDataSourceProtocolUdpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceDataSourceProtocolUdpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sourcePort_value types.Int64
	if obj.SourcePort != nil {
		sourcePort_value = types.Int64Value(*obj.SourcePort)
	}
	var destinationPort_value types.Int64
	if obj.DestinationPort != nil {
		destinationPort_value = types.Int64Value(*obj.DestinationPort)
	}
	o.SourcePort = sourcePort_value
	o.Override = override_object
	o.DestinationPort = destinationPort_value

	return diags
}

func (o *ServiceDataSourceProtocolUdpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var yes_object *ServiceDataSourceProtocolUdpOverrideYesObject
	if obj.Yes != nil {
		yes_object = new(ServiceDataSourceProtocolUdpOverrideYesObject)

		diags.Append(yes_object.CopyFromPango(ctx, obj.Yes, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var no_value types.String
	if obj.No != nil {
		no_value = types.StringValue(*obj.No)
	}
	o.Yes = yes_object
	o.No = no_value

	return diags
}

func (o *ServiceDataSourceProtocolUdpOverrideYesObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverrideYes, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Timeout = timeout_value

	return diags
}

func ServiceDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": ServiceDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": dsschema.StringAttribute{
				Description: "The name of the service.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"protocol": ServiceDataSourceProtocolSchema(),

			"description": dsschema.StringAttribute{
				Description: "The description.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceModel) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"tcp": ServiceDataSourceProtocolTcpSchema(),

			"udp": ServiceDataSourceProtocolUdpSchema(),
		},
	}
}

func (o *ServiceDataSourceProtocolObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolTcpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"source_port": dsschema.Int64Attribute{
				Description: "The source port.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceDataSourceProtocolTcpOverrideSchema(),

			"destination_port": dsschema.Int64Attribute{
				Description: "The destination port.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolTcpObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolTcpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolTcpOverrideSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"timeout": dsschema.Int64Attribute{
				Description: "TCP session timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"halfclose_timeout": dsschema.Int64Attribute{
				Description: "TCP session half-close timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timewait_timeout": dsschema.Int64Attribute{
				Description: "TCP session time-wait timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolTcpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolTcpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolUdpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"destination_port": dsschema.Int64Attribute{
				Description: "The destination port.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": dsschema.Int64Attribute{
				Description: "The source port.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceDataSourceProtocolUdpOverrideSchema(),
		},
	}
}

func (o *ServiceDataSourceProtocolUdpObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolUdpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolUdpOverrideSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"yes": ServiceDataSourceProtocolUdpOverrideYesSchema(),

			"no": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolUdpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolUdpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolUdpOverrideYesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"timeout": dsschema.Int64Attribute{
				Description: "UDP session timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolUdpOverrideYesObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolUdpOverrideYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceLocationSchema() rsschema.Attribute {
	return ServiceLocationSchema()
}

// Metadata returns the data source type name.
func (d *ServiceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service"
}

// Schema defines the schema for this data source.
func (d *ServiceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = ServiceDataSourceSchema()
}

// Configure prepares the struct.
func (d *ServiceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := service.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, service.NewService(d.client), specifier, service.SpecMatches)
}

func (o *ServiceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state ServiceDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc ServiceDataSourceTfid
	loc.Name = *savestate.Name.ValueStringPointer()

	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		loc.Location.Shared = true
	}
	if savestate.Location.Vsys != nil {
		loc.Location.Vsys = &service.VsysLocation{

			NgfwDevice: savestate.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       savestate.Location.Vsys.Name.ValueString(),
		}
	}
	if !savestate.Location.FromPanoramaShared.IsNull() && savestate.Location.FromPanoramaShared.ValueBool() {
		loc.Location.FromPanoramaShared = true
	}
	if savestate.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &service.FromPanoramaVsysLocation{

			Vsys: savestate.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if savestate.Location.DeviceGroup != nil {
		loc.Location.DeviceGroup = &service.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &ServiceResource{}
	_ resource.ResourceWithConfigure   = &ServiceResource{}
	_ resource.ResourceWithImportState = &ServiceResource{}
)

func NewServiceResource() resource.Resource {
	return &ServiceResource{}
}

type ServiceResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*service.Entry, service.Location, *service.Service]
}
type ServiceResourceTfid struct {
	Name     string           `json:"name"`
	Location service.Location `json:"location"`
}

func (o *ServiceResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func ServiceResourceLocationSchema() rsschema.Attribute {
	return ServiceLocationSchema()
}

type ServiceResourceModel struct {
	Tfid        types.String                   `tfsdk:"tfid"`
	Location    ServiceLocation                `tfsdk:"location"`
	Name        types.String                   `tfsdk:"name"`
	Description types.String                   `tfsdk:"description"`
	Tags        types.List                     `tfsdk:"tags"`
	Protocol    *ServiceResourceProtocolObject `tfsdk:"protocol"`
}
type ServiceResourceProtocolObject struct {
	Tcp *ServiceResourceProtocolTcpObject `tfsdk:"tcp"`
	Udp *ServiceResourceProtocolUdpObject `tfsdk:"udp"`
}
type ServiceResourceProtocolTcpObject struct {
	SourcePort      types.Int64                               `tfsdk:"source_port"`
	Override        *ServiceResourceProtocolTcpOverrideObject `tfsdk:"override"`
	DestinationPort types.Int64                               `tfsdk:"destination_port"`
}
type ServiceResourceProtocolTcpOverrideObject struct {
	Timeout          types.Int64 `tfsdk:"timeout"`
	HalfcloseTimeout types.Int64 `tfsdk:"halfclose_timeout"`
	TimewaitTimeout  types.Int64 `tfsdk:"timewait_timeout"`
}
type ServiceResourceProtocolUdpObject struct {
	DestinationPort types.Int64                               `tfsdk:"destination_port"`
	SourcePort      types.Int64                               `tfsdk:"source_port"`
	Override        *ServiceResourceProtocolUdpOverrideObject `tfsdk:"override"`
}
type ServiceResourceProtocolUdpOverrideObject struct {
	Yes *ServiceResourceProtocolUdpOverrideYesObject `tfsdk:"yes"`
	No  types.String                                 `tfsdk:"no"`
}
type ServiceResourceProtocolUdpOverrideYesObject struct {
	Timeout types.Int64 `tfsdk:"timeout"`
}

func (r *ServiceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service"
}

func (r *ServiceResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func ServiceResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": ServiceResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": rsschema.StringAttribute{
				Description: "The name of the service.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "The description.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"protocol": ServiceResourceProtocolSchema(),
		},
	}
}

func (o *ServiceResourceModel) getTypeFor(name string) attr.Type {
	schema := ServiceResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"udp": ServiceResourceProtocolUdpSchema(),

			"tcp": ServiceResourceProtocolTcpSchema(),
		},
	}
}

func (o *ServiceResourceProtocolObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolTcpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("udp"),
				path.MatchRelative().AtParent().AtName("tcp"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"source_port": rsschema.Int64Attribute{
				Description: "The source port.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceResourceProtocolTcpOverrideSchema(),

			"destination_port": rsschema.Int64Attribute{
				Description: "The destination port.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceResourceProtocolTcpObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolTcpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolTcpOverrideSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"timeout": rsschema.Int64Attribute{
				Description: "TCP session timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"halfclose_timeout": rsschema.Int64Attribute{
				Description: "TCP session half-close timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timewait_timeout": rsschema.Int64Attribute{
				Description: "TCP session time-wait timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceResourceProtocolTcpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolTcpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolUdpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("udp"),
				path.MatchRelative().AtParent().AtName("tcp"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"destination_port": rsschema.Int64Attribute{
				Description: "The destination port.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": rsschema.Int64Attribute{
				Description: "The source port.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceResourceProtocolUdpOverrideSchema(),
		},
	}
}

func (o *ServiceResourceProtocolUdpObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolUdpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolUdpOverrideSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"no": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("yes"),
						path.MatchRelative().AtParent().AtName("no"),
					}...),
				},
			},

			"yes": ServiceResourceProtocolUdpOverrideYesSchema(),
		},
	}
}

func (o *ServiceResourceProtocolUdpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolUdpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolUdpOverrideYesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("yes"),
				path.MatchRelative().AtParent().AtName("no"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"timeout": rsschema.Int64Attribute{
				Description: "UDP session timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceResourceProtocolUdpOverrideYesObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolUdpOverrideYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *ServiceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ServiceResourceSchema()
}

// </ResourceSchema>

func (r *ServiceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := service.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, service.NewService(r.client), specifier, service.SpecMatches)
}

func (o *ServiceResourceModel) CopyToPango(ctx context.Context, obj **service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var protocol_entry *service.Protocol
	if o.Protocol != nil {
		if *obj != nil && (*obj).Protocol != nil {
			protocol_entry = (*obj).Protocol
		} else {
			protocol_entry = new(service.Protocol)
		}

		diags.Append(o.Protocol.CopyToPango(ctx, &protocol_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).Tags = tags_pango_entries
	(*obj).Protocol = protocol_entry

	return diags
}
func (o *ServiceResourceProtocolObject) CopyToPango(ctx context.Context, obj **service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_entry *service.ProtocolTcp
	if o.Tcp != nil {
		if *obj != nil && (*obj).Tcp != nil {
			tcp_entry = (*obj).Tcp
		} else {
			tcp_entry = new(service.ProtocolTcp)
		}

		diags.Append(o.Tcp.CopyToPango(ctx, &tcp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_entry *service.ProtocolUdp
	if o.Udp != nil {
		if *obj != nil && (*obj).Udp != nil {
			udp_entry = (*obj).Udp
		} else {
			udp_entry = new(service.ProtocolUdp)
		}

		diags.Append(o.Udp.CopyToPango(ctx, &udp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Protocol)
	}
	(*obj).Tcp = tcp_entry
	(*obj).Udp = udp_entry

	return diags
}
func (o *ServiceResourceProtocolTcpObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueInt64Pointer()
	sourcePort_value := o.SourcePort.ValueInt64Pointer()
	var override_entry *service.ProtocolTcpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolTcpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolTcp)
	}
	(*obj).DestinationPort = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceResourceProtocolTcpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timewaitTimeout_value := o.TimewaitTimeout.ValueInt64Pointer()
	timeout_value := o.Timeout.ValueInt64Pointer()
	halfcloseTimeout_value := o.HalfcloseTimeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolTcpOverride)
	}
	(*obj).TimewaitTimeout = timewaitTimeout_value
	(*obj).Timeout = timeout_value
	(*obj).HalfcloseTimeout = halfcloseTimeout_value

	return diags
}
func (o *ServiceResourceProtocolUdpObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueInt64Pointer()
	sourcePort_value := o.SourcePort.ValueInt64Pointer()
	var override_entry *service.ProtocolUdpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolUdpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolUdp)
	}
	(*obj).DestinationPort = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceResourceProtocolUdpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var yes_entry *service.ProtocolUdpOverrideYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(service.ProtocolUdpOverrideYes)
		}

		diags.Append(o.Yes.CopyToPango(ctx, &yes_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	no_value := o.No.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverride)
	}
	(*obj).Yes = yes_entry
	(*obj).No = no_value

	return diags
}
func (o *ServiceResourceProtocolUdpOverrideYesObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverrideYes, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timeout_value := o.Timeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverrideYes)
	}
	(*obj).Timeout = timeout_value

	return diags
}

func (o *ServiceResourceModel) CopyFromPango(ctx context.Context, obj *service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var protocol_object *ServiceResourceProtocolObject
	if obj.Protocol != nil {
		protocol_object = new(ServiceResourceProtocolObject)

		diags.Append(protocol_object.CopyFromPango(ctx, obj.Protocol, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Protocol = protocol_object
	o.Description = description_value
	o.Tags = tags_list

	return diags
}

func (o *ServiceResourceProtocolObject) CopyFromPango(ctx context.Context, obj *service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var udp_object *ServiceResourceProtocolUdpObject
	if obj.Udp != nil {
		udp_object = new(ServiceResourceProtocolUdpObject)

		diags.Append(udp_object.CopyFromPango(ctx, obj.Udp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var tcp_object *ServiceResourceProtocolTcpObject
	if obj.Tcp != nil {
		tcp_object = new(ServiceResourceProtocolTcpObject)

		diags.Append(tcp_object.CopyFromPango(ctx, obj.Tcp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.Udp = udp_object
	o.Tcp = tcp_object

	return diags
}

func (o *ServiceResourceProtocolTcpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceResourceProtocolTcpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceResourceProtocolTcpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationPort_value types.Int64
	if obj.DestinationPort != nil {
		destinationPort_value = types.Int64Value(*obj.DestinationPort)
	}
	var sourcePort_value types.Int64
	if obj.SourcePort != nil {
		sourcePort_value = types.Int64Value(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceResourceProtocolTcpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var halfcloseTimeout_value types.Int64
	if obj.HalfcloseTimeout != nil {
		halfcloseTimeout_value = types.Int64Value(*obj.HalfcloseTimeout)
	}
	var timewaitTimeout_value types.Int64
	if obj.TimewaitTimeout != nil {
		timewaitTimeout_value = types.Int64Value(*obj.TimewaitTimeout)
	}
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.HalfcloseTimeout = halfcloseTimeout_value
	o.TimewaitTimeout = timewaitTimeout_value
	o.Timeout = timeout_value

	return diags
}

func (o *ServiceResourceProtocolUdpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceResourceProtocolUdpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceResourceProtocolUdpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sourcePort_value types.Int64
	if obj.SourcePort != nil {
		sourcePort_value = types.Int64Value(*obj.SourcePort)
	}
	var destinationPort_value types.Int64
	if obj.DestinationPort != nil {
		destinationPort_value = types.Int64Value(*obj.DestinationPort)
	}
	o.SourcePort = sourcePort_value
	o.Override = override_object
	o.DestinationPort = destinationPort_value

	return diags
}

func (o *ServiceResourceProtocolUdpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var yes_object *ServiceResourceProtocolUdpOverrideYesObject
	if obj.Yes != nil {
		yes_object = new(ServiceResourceProtocolUdpOverrideYesObject)

		diags.Append(yes_object.CopyFromPango(ctx, obj.Yes, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var no_value types.String
	if obj.No != nil {
		no_value = types.StringValue(*obj.No)
	}
	o.Yes = yes_object
	o.No = no_value

	return diags
}

func (o *ServiceResourceProtocolUdpOverrideYesObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverrideYes, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Timeout = timeout_value

	return diags
}

func (r *ServiceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ServiceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := ServiceResourceTfid{Name: state.Name.ValueString()}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if state.Location.Vsys != nil {
		loc.Location.Vsys = &service.VsysLocation{

			Vsys:       state.Location.Vsys.Name.ValueString(),
			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
		}
	}
	if !state.Location.FromPanoramaShared.IsNull() && state.Location.FromPanoramaShared.ValueBool() {
		loc.Location.FromPanoramaShared = true
	}
	if state.Location.FromPanoramaVsys != nil {
		loc.Location.FromPanoramaVsys = &service.FromPanoramaVsysLocation{

			Vsys: state.Location.FromPanoramaVsys.Vsys.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		loc.Location.DeviceGroup = &service.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}
	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		loc.Location.Shared = true
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *service.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *ServiceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc ServiceResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *ServiceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc ServiceResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	loc.Name = obj.Name
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *ServiceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc ServiceResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Delete",
		"name":          loc.Name,
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	err := r.manager.Delete(ctx, loc.Location, []string{loc.Name})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *ServiceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type ServiceVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type ServiceFromPanoramaVsysLocation struct {
	Vsys types.String `tfsdk:"vsys"`
}
type ServiceDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type ServiceLocation struct {
	Shared             types.Bool                       `tfsdk:"shared"`
	Vsys               *ServiceVsysLocation             `tfsdk:"vsys"`
	FromPanoramaShared types.Bool                       `tfsdk:"from_panorama_shared"`
	FromPanoramaVsys   *ServiceFromPanoramaVsysLocation `tfsdk:"from_panorama_vsys"`
	DeviceGroup        *ServiceDeviceGroupLocation      `tfsdk:"device_group"`
}

func ServiceLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.BoolAttribute{
				Description: "Located in shared.",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Bool{
					boolvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("device_group"),
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("from_panorama_shared"),
						path.MatchRelative().AtParent().AtName("from_panorama_vsys"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_shared": rsschema.BoolAttribute{
				Description: "Located in shared in the config pushed from Panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
			},
			"from_panorama_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys in the config pushed from Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
