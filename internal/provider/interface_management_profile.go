package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/profiles/interface_management"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &InterfaceManagementProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &InterfaceManagementProfileDataSource{}
)

func NewInterfaceManagementProfileDataSource() datasource.DataSource {
	return &InterfaceManagementProfileDataSource{}
}

type InterfaceManagementProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service]
}

type InterfaceManagementProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type InterfaceManagementProfileDataSourceTfid struct {
	Name     string                        `json:"name"`
	Location interface_management.Location `json:"location"`
}

func (o *InterfaceManagementProfileDataSourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

type InterfaceManagementProfileDataSourceModel struct {
	Tfid                    types.String                       `tfsdk:"tfid"`
	Location                InterfaceManagementProfileLocation `tfsdk:"location"`
	Name                    types.String                       `tfsdk:"name"`
	Ssh                     types.Bool                         `tfsdk:"ssh"`
	HttpOcsp                types.Bool                         `tfsdk:"http_ocsp"`
	PermittedIps            types.List                         `tfsdk:"permitted_ips"`
	Http                    types.Bool                         `tfsdk:"http"`
	Https                   types.Bool                         `tfsdk:"https"`
	Ping                    types.Bool                         `tfsdk:"ping"`
	UseridService           types.Bool                         `tfsdk:"userid_service"`
	Snmp                    types.Bool                         `tfsdk:"snmp"`
	ResponsePages           types.Bool                         `tfsdk:"response_pages"`
	UseridSyslogListenerSsl types.Bool                         `tfsdk:"userid_syslog_listener_ssl"`
	UseridSyslogListenerUdp types.Bool                         `tfsdk:"userid_syslog_listener_udp"`
	Telnet                  types.Bool                         `tfsdk:"telnet"`
}

func (o *InterfaceManagementProfileDataSourceModel) CopyToPango(ctx context.Context, obj **interface_management.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	httpOcsp_value := o.HttpOcsp.ValueBoolPointer()
	permittedIps_pango_entries := make([]string, 0)
	diags.Append(o.PermittedIps.ElementsAs(ctx, &permittedIps_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	http_value := o.Http.ValueBoolPointer()
	https_value := o.Https.ValueBoolPointer()
	ping_value := o.Ping.ValueBoolPointer()
	useridService_value := o.UseridService.ValueBoolPointer()
	ssh_value := o.Ssh.ValueBoolPointer()
	responsePages_value := o.ResponsePages.ValueBoolPointer()
	useridSyslogListenerSsl_value := o.UseridSyslogListenerSsl.ValueBoolPointer()
	useridSyslogListenerUdp_value := o.UseridSyslogListenerUdp.ValueBoolPointer()
	telnet_value := o.Telnet.ValueBoolPointer()
	snmp_value := o.Snmp.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(interface_management.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HttpOcsp = httpOcsp_value
	(*obj).PermittedIps = permittedIps_pango_entries
	(*obj).Http = http_value
	(*obj).Https = https_value
	(*obj).Ping = ping_value
	(*obj).UseridService = useridService_value
	(*obj).Ssh = ssh_value
	(*obj).ResponsePages = responsePages_value
	(*obj).UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	(*obj).UseridSyslogListenerUdp = useridSyslogListenerUdp_value
	(*obj).Telnet = telnet_value
	(*obj).Snmp = snmp_value

	return diags
}

func (o *InterfaceManagementProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *interface_management.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var permittedIps_list types.List
	{
		var list_diags diag.Diagnostics
		permittedIps_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.PermittedIps)
		diags.Append(list_diags...)
	}
	var http_value types.Bool
	if obj.Http != nil {
		http_value = types.BoolValue(*obj.Http)
	}
	var https_value types.Bool
	if obj.Https != nil {
		https_value = types.BoolValue(*obj.Https)
	}
	var ping_value types.Bool
	if obj.Ping != nil {
		ping_value = types.BoolValue(*obj.Ping)
	}
	var useridService_value types.Bool
	if obj.UseridService != nil {
		useridService_value = types.BoolValue(*obj.UseridService)
	}
	var ssh_value types.Bool
	if obj.Ssh != nil {
		ssh_value = types.BoolValue(*obj.Ssh)
	}
	var httpOcsp_value types.Bool
	if obj.HttpOcsp != nil {
		httpOcsp_value = types.BoolValue(*obj.HttpOcsp)
	}
	var responsePages_value types.Bool
	if obj.ResponsePages != nil {
		responsePages_value = types.BoolValue(*obj.ResponsePages)
	}
	var useridSyslogListenerSsl_value types.Bool
	if obj.UseridSyslogListenerSsl != nil {
		useridSyslogListenerSsl_value = types.BoolValue(*obj.UseridSyslogListenerSsl)
	}
	var useridSyslogListenerUdp_value types.Bool
	if obj.UseridSyslogListenerUdp != nil {
		useridSyslogListenerUdp_value = types.BoolValue(*obj.UseridSyslogListenerUdp)
	}
	var telnet_value types.Bool
	if obj.Telnet != nil {
		telnet_value = types.BoolValue(*obj.Telnet)
	}
	var snmp_value types.Bool
	if obj.Snmp != nil {
		snmp_value = types.BoolValue(*obj.Snmp)
	}
	o.Name = types.StringValue(obj.Name)
	o.Http = http_value
	o.Https = https_value
	o.Ping = ping_value
	o.UseridService = useridService_value
	o.Ssh = ssh_value
	o.HttpOcsp = httpOcsp_value
	o.PermittedIps = permittedIps_list
	o.ResponsePages = responsePages_value
	o.UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	o.UseridSyslogListenerUdp = useridSyslogListenerUdp_value
	o.Telnet = telnet_value
	o.Snmp = snmp_value

	return diags
}

func InterfaceManagementProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": InterfaceManagementProfileDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": dsschema.StringAttribute{
				Description: "The name of the interface management profile.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"userid_syslog_listener_udp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telnet": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"response_pages": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_ssl": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ping": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_service": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_ocsp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"permitted_ips": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"http": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"https": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func InterfaceManagementProfileDataSourceLocationSchema() rsschema.Attribute {
	return InterfaceManagementProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *InterfaceManagementProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_management_profile"
}

// Schema defines the schema for this data source.
func (d *InterfaceManagementProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = InterfaceManagementProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *InterfaceManagementProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := interface_management.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, interface_management.NewService(d.client), specifier, interface_management.SpecMatches)
}

func (o *InterfaceManagementProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state InterfaceManagementProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc InterfaceManagementProfileDataSourceTfid
	loc.Name = *savestate.Name.ValueStringPointer()

	if savestate.Location.Ngfw != nil {
		loc.Location.Ngfw = &interface_management.NgfwLocation{

			NgfwDevice: savestate.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.Template != nil {
		loc.Location.Template = &interface_management.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &interface_management.TemplateStackLocation{

			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &InterfaceManagementProfileResource{}
	_ resource.ResourceWithConfigure   = &InterfaceManagementProfileResource{}
	_ resource.ResourceWithImportState = &InterfaceManagementProfileResource{}
)

func NewInterfaceManagementProfileResource() resource.Resource {
	return &InterfaceManagementProfileResource{}
}

type InterfaceManagementProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service]
}
type InterfaceManagementProfileResourceTfid struct {
	Name     string                        `json:"name"`
	Location interface_management.Location `json:"location"`
}

func (o *InterfaceManagementProfileResourceTfid) IsValid() error {
	if o.Name == "" {
		return fmt.Errorf("name is unspecified")
	}
	return o.Location.IsValid()
}

func InterfaceManagementProfileResourceLocationSchema() rsschema.Attribute {
	return InterfaceManagementProfileLocationSchema()
}

type InterfaceManagementProfileResourceModel struct {
	Tfid                    types.String                       `tfsdk:"tfid"`
	Location                InterfaceManagementProfileLocation `tfsdk:"location"`
	Name                    types.String                       `tfsdk:"name"`
	ResponsePages           types.Bool                         `tfsdk:"response_pages"`
	UseridSyslogListenerSsl types.Bool                         `tfsdk:"userid_syslog_listener_ssl"`
	UseridSyslogListenerUdp types.Bool                         `tfsdk:"userid_syslog_listener_udp"`
	Telnet                  types.Bool                         `tfsdk:"telnet"`
	Snmp                    types.Bool                         `tfsdk:"snmp"`
	Http                    types.Bool                         `tfsdk:"http"`
	Https                   types.Bool                         `tfsdk:"https"`
	Ping                    types.Bool                         `tfsdk:"ping"`
	UseridService           types.Bool                         `tfsdk:"userid_service"`
	Ssh                     types.Bool                         `tfsdk:"ssh"`
	HttpOcsp                types.Bool                         `tfsdk:"http_ocsp"`
	PermittedIps            types.List                         `tfsdk:"permitted_ips"`
}

func (r *InterfaceManagementProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_management_profile"
}

func (r *InterfaceManagementProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func InterfaceManagementProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": InterfaceManagementProfileResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"name": rsschema.StringAttribute{
				Description: "The name of the interface management profile.",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"snmp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"response_pages": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_ssl": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_udp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telnet": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_ocsp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"permitted_ips": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"http": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"https": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ping": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_service": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *InterfaceManagementProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = InterfaceManagementProfileResourceSchema()
}

// </ResourceSchema>

func (r *InterfaceManagementProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := interface_management.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, interface_management.NewService(r.client), specifier, interface_management.SpecMatches)
}

func (o *InterfaceManagementProfileResourceModel) CopyToPango(ctx context.Context, obj **interface_management.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	telnet_value := o.Telnet.ValueBoolPointer()
	snmp_value := o.Snmp.ValueBoolPointer()
	responsePages_value := o.ResponsePages.ValueBoolPointer()
	useridSyslogListenerSsl_value := o.UseridSyslogListenerSsl.ValueBoolPointer()
	useridSyslogListenerUdp_value := o.UseridSyslogListenerUdp.ValueBoolPointer()
	useridService_value := o.UseridService.ValueBoolPointer()
	ssh_value := o.Ssh.ValueBoolPointer()
	httpOcsp_value := o.HttpOcsp.ValueBoolPointer()
	permittedIps_pango_entries := make([]string, 0)
	diags.Append(o.PermittedIps.ElementsAs(ctx, &permittedIps_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	http_value := o.Http.ValueBoolPointer()
	https_value := o.Https.ValueBoolPointer()
	ping_value := o.Ping.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(interface_management.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Telnet = telnet_value
	(*obj).Snmp = snmp_value
	(*obj).ResponsePages = responsePages_value
	(*obj).UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	(*obj).UseridSyslogListenerUdp = useridSyslogListenerUdp_value
	(*obj).UseridService = useridService_value
	(*obj).Ssh = ssh_value
	(*obj).HttpOcsp = httpOcsp_value
	(*obj).PermittedIps = permittedIps_pango_entries
	(*obj).Http = http_value
	(*obj).Https = https_value
	(*obj).Ping = ping_value

	return diags
}

func (o *InterfaceManagementProfileResourceModel) CopyFromPango(ctx context.Context, obj *interface_management.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var permittedIps_list types.List
	{
		var list_diags diag.Diagnostics
		permittedIps_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.PermittedIps)
		diags.Append(list_diags...)
	}
	var httpOcsp_value types.Bool
	if obj.HttpOcsp != nil {
		httpOcsp_value = types.BoolValue(*obj.HttpOcsp)
	}
	var http_value types.Bool
	if obj.Http != nil {
		http_value = types.BoolValue(*obj.Http)
	}
	var https_value types.Bool
	if obj.Https != nil {
		https_value = types.BoolValue(*obj.Https)
	}
	var ping_value types.Bool
	if obj.Ping != nil {
		ping_value = types.BoolValue(*obj.Ping)
	}
	var useridService_value types.Bool
	if obj.UseridService != nil {
		useridService_value = types.BoolValue(*obj.UseridService)
	}
	var ssh_value types.Bool
	if obj.Ssh != nil {
		ssh_value = types.BoolValue(*obj.Ssh)
	}
	var responsePages_value types.Bool
	if obj.ResponsePages != nil {
		responsePages_value = types.BoolValue(*obj.ResponsePages)
	}
	var useridSyslogListenerSsl_value types.Bool
	if obj.UseridSyslogListenerSsl != nil {
		useridSyslogListenerSsl_value = types.BoolValue(*obj.UseridSyslogListenerSsl)
	}
	var useridSyslogListenerUdp_value types.Bool
	if obj.UseridSyslogListenerUdp != nil {
		useridSyslogListenerUdp_value = types.BoolValue(*obj.UseridSyslogListenerUdp)
	}
	var telnet_value types.Bool
	if obj.Telnet != nil {
		telnet_value = types.BoolValue(*obj.Telnet)
	}
	var snmp_value types.Bool
	if obj.Snmp != nil {
		snmp_value = types.BoolValue(*obj.Snmp)
	}
	o.Name = types.StringValue(obj.Name)
	o.HttpOcsp = httpOcsp_value
	o.PermittedIps = permittedIps_list
	o.Http = http_value
	o.Https = https_value
	o.Ping = ping_value
	o.UseridService = useridService_value
	o.Ssh = ssh_value
	o.ResponsePages = responsePages_value
	o.UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	o.UseridSyslogListenerUdp = useridSyslogListenerUdp_value
	o.Telnet = telnet_value
	o.Snmp = snmp_value

	return diags
}

func (r *InterfaceManagementProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := InterfaceManagementProfileResourceTfid{Name: state.Name.ValueString()}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if state.Location.Template != nil {
		loc.Location.Template = &interface_management.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &interface_management.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Ngfw != nil {
		loc.Location.Ngfw = &interface_management.NgfwLocation{

			NgfwDevice: state.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *interface_management.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *InterfaceManagementProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc InterfaceManagementProfileResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Read",
		"name":          loc.Name,
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *InterfaceManagementProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc InterfaceManagementProfileResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj, loc.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	loc.Name = obj.Name
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *InterfaceManagementProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc InterfaceManagementProfileResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Delete",
		"name":          loc.Name,
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	err := r.manager.Delete(ctx, loc.Location, []string{loc.Name})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *InterfaceManagementProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type InterfaceManagementProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileNgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileLocation struct {
	TemplateStack *InterfaceManagementProfileTemplateStackLocation `tfsdk:"template_stack"`
	Ngfw          *InterfaceManagementProfileNgfwLocation          `tfsdk:"ngfw"`
	Template      *InterfaceManagementProfileTemplateLocation      `tfsdk:"template"`
}

func InterfaceManagementProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
