package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/services/ntp"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &NtpSettingsDataSource{}
	_ datasource.DataSourceWithConfigure = &NtpSettingsDataSource{}
)

func NewNtpSettingsDataSource() datasource.DataSource {
	return &NtpSettingsDataSource{}
}

type NtpSettingsDataSource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}

type NtpSettingsDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}
type NtpSettingsDataSourceTfid struct {
	Location ntp.Location `json:"location"`
}

func (o *NtpSettingsDataSourceTfid) IsValid() error {
	return o.Location.IsValid()
}

type NtpSettingsDataSourceModel struct {
	Tfid            types.String                           `tfsdk:"tfid"`
	Location        NtpSettingsLocation                    `tfsdk:"location"`
	NtpServers      *NtpSettingsDataSourceNtpServersObject `tfsdk:"ntp_servers"`
	EncryptedValues types.Map                              `tfsdk:"encrypted_values"`
}
type NtpSettingsDataSourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerObject struct {
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
	AuthenticationType *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	Autokey      types.String                                                                         `tfsdk:"autokey"`
	None         types.String                                                                         `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	KeyId types.Int64                                                                              `tfsdk:"key_id"`
	Md5   *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object  `tfsdk:"md5"`
	Sha1  *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerObject struct {
	NtpServerAddress   types.String                                                               `tfsdk:"ntp_server_address"`
	AuthenticationType *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	None         types.String                                                                           `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
	Autokey      types.String                                                                           `tfsdk:"autokey"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	KeyId types.Int64                                                                                `tfsdk:"key_id"`
	Md5   *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object  `tfsdk:"md5"`
	Sha1  *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (o *NtpSettingsDataSourceModel) CopyToPango(ctx context.Context, obj **ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}

		diags.Append(o.NtpServers.CopyToPango(ctx, &ntpServers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersObject) CopyToPango(ctx context.Context, obj **ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}

		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, &primaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}

		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, &secondaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).NtpServerAddress = ntpServerAddress_value
	(*obj).AuthenticationType = authenticationType_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	none_value := o.None.ValueStringPointer()
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	autokey_value := o.Autokey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).None = none_value
	(*obj).SymmetricKey = symmetricKey_entry
	(*obj).Autokey = autokey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	keyId_value := o.KeyId.ValueInt64Pointer()
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).KeyId = keyId_value
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).NtpServerAddress = ntpServerAddress_value
	(*obj).AuthenticationType = authenticationType_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	autokey_value := o.Autokey.ValueStringPointer()
	none_value := o.None.ValueStringPointer()
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_value
	(*obj).None = none_value
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	keyId_value := o.KeyId.ValueInt64Pointer()
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).KeyId = keyId_value
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceModel) CopyFromPango(ctx context.Context, obj *ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsDataSourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsDataSourceNtpServersObject)

		diags.Append(ntpServers_object.CopyFromPango(ctx, obj.NtpServers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerObject)

		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, obj.PrimaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerObject)

		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, obj.SecondaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var symmetricKey_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var autokey_value types.String
	if obj.Autokey != nil {
		autokey_value = types.StringValue(*obj.Autokey)
	}
	var none_value types.String
	if obj.None != nil {
		none_value = types.StringValue(*obj.None)
	}
	o.Autokey = autokey_value
	o.None = none_value
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.KeyId = keyId_value
	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.NtpServerAddress = ntpServerAddress_value
	o.AuthenticationType = authenticationType_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var symmetricKey_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_value types.String
	if obj.None != nil {
		none_value = types.StringValue(*obj.None)
	}
	var autokey_value types.String
	if obj.Autokey != nil {
		autokey_value = types.StringValue(*obj.Autokey)
	}
	o.None = none_value
	o.SymmetricKey = symmetricKey_object
	o.Autokey = autokey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.KeyId = keyId_value
	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func NtpSettingsDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": NtpSettingsDataSourceLocationSchema(),

			"tfid": dsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"encrypted_values": dsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"ntp_servers": NtpSettingsDataSourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"primary_ntp_server": NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_type": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"none": dsschema.StringAttribute{
				Description: "No NTP Authentication",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("autokey"),
						path.MatchRelative().AtParent().AtName("none"),
						path.MatchRelative().AtParent().AtName("symmetric_key"),
					}...),
				},
			},

			"symmetric_key": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),

			"autokey": dsschema.StringAttribute{
				Description: "Autokey Authentication",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"md5": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema(),

			"sha1": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_type": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"none": dsschema.StringAttribute{
				Description: "No NTP Authentication",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("none"),
						path.MatchRelative().AtParent().AtName("symmetric_key"),
						path.MatchRelative().AtParent().AtName("autokey"),
					}...),
				},
			},

			"symmetric_key": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),

			"autokey": dsschema.StringAttribute{
				Description: "Autokey Authentication",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
				path.MatchRelative().AtParent().AtName("autokey"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sha1": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema(),

			"md5": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

// Metadata returns the data source type name.
func (d *NtpSettingsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

// Schema defines the schema for this data source.
func (d *NtpSettingsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = NtpSettingsDataSourceSchema()
}

// Configure prepares the struct.
func (d *NtpSettingsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := ntp.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewConfigObjectManager(d.client, ntp.NewService(d.client), specifier)
}

func (o *NtpSettingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state NtpSettingsDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc NtpSettingsDataSourceTfid

	if savestate.Location.Template != nil {
		loc.Location.Template = &ntp.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &ntp.TemplateStackLocation{

			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
		}
	}
	if savestate.Location.System != nil {
		loc.Location.System = &ntp.SystemLocation{

			NgfwDevice: savestate.Location.System.NgfwDevice.ValueString(),
		}
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &NtpSettingsResource{}
	_ resource.ResourceWithConfigure   = &NtpSettingsResource{}
	_ resource.ResourceWithImportState = &NtpSettingsResource{}
)

func NewNtpSettingsResource() resource.Resource {
	return &NtpSettingsResource{}
}

type NtpSettingsResource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}
type NtpSettingsResourceTfid struct {
	Location ntp.Location `json:"location"`
}

func (o *NtpSettingsResourceTfid) IsValid() error {
	return o.Location.IsValid()
}

func NtpSettingsResourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

type NtpSettingsResourceModel struct {
	Tfid            types.String                         `tfsdk:"tfid"`
	Location        NtpSettingsLocation                  `tfsdk:"location"`
	NtpServers      *NtpSettingsResourceNtpServersObject `tfsdk:"ntp_servers"`
	EncryptedValues types.Map                            `tfsdk:"encrypted_values"`
}
type NtpSettingsResourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsResourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsResourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerObject struct {
	NtpServerAddress   types.String                                                           `tfsdk:"ntp_server_address"`
	AuthenticationType *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	None         types.String                                                                       `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
	Autokey      types.String                                                                       `tfsdk:"autokey"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	KeyId types.Int64                                                                            `tfsdk:"key_id"`
	Sha1  *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object `tfsdk:"sha1"`
	Md5   *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object  `tfsdk:"md5"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerObject struct {
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
	AuthenticationType *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	None         types.String                                                                         `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
	Autokey      types.String                                                                         `tfsdk:"autokey"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	KeyId types.Int64                                                                              `tfsdk:"key_id"`
	Sha1  *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object `tfsdk:"sha1"`
	Md5   *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object  `tfsdk:"md5"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (r *NtpSettingsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

func (r *NtpSettingsResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func NtpSettingsResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": NtpSettingsResourceLocationSchema(),

			"tfid": rsschema.StringAttribute{
				Description: "The Terraform ID.",
				Computed:    true,
				Required:    false,
				Optional:    false,
				Sensitive:   false,
			},

			"encrypted_values": rsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"ntp_servers": NtpSettingsResourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsResourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"primary_ntp_server": NtpSettingsResourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsResourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_type": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"none": rsschema.StringAttribute{
				Description: "No NTP Authentication",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("none"),
						path.MatchRelative().AtParent().AtName("symmetric_key"),
						path.MatchRelative().AtParent().AtName("autokey"),
					}...),
				},
			},

			"symmetric_key": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),

			"autokey": rsschema.StringAttribute{
				Description: "Autokey Authentication",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
				path.MatchRelative().AtParent().AtName("autokey"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"md5": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_type": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"none": rsschema.StringAttribute{
				Description: "No NTP Authentication",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("none"),
						path.MatchRelative().AtParent().AtName("symmetric_key"),
						path.MatchRelative().AtParent().AtName("autokey"),
					}...),
				},
			},

			"symmetric_key": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),

			"autokey": rsschema.StringAttribute{
				Description: "Autokey Authentication",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
				path.MatchRelative().AtParent().AtName("autokey"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"md5": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *NtpSettingsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = NtpSettingsResourceSchema()
}

// </ResourceSchema>

func (r *NtpSettingsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := ntp.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewConfigObjectManager(r.client, ntp.NewService(r.client), specifier)
}

func (o *NtpSettingsResourceModel) CopyToPango(ctx context.Context, obj **ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}

		diags.Append(o.NtpServers.CopyToPango(ctx, &ntpServers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersObject) CopyToPango(ctx context.Context, obj **ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}

		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, &primaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}

		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, &secondaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	autokey_value := o.Autokey.ValueStringPointer()
	none_value := o.None.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).SymmetricKey = symmetricKey_entry
	(*obj).Autokey = autokey_value
	(*obj).None = none_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	keyId_value := o.KeyId.ValueInt64Pointer()
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).KeyId = keyId_value
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).NtpServerAddress = ntpServerAddress_value
	(*obj).AuthenticationType = authenticationType_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	none_value := o.None.ValueStringPointer()
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	autokey_value := o.Autokey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).None = none_value
	(*obj).SymmetricKey = symmetricKey_entry
	(*obj).Autokey = autokey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	keyId_value := o.KeyId.ValueInt64Pointer()
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).KeyId = keyId_value
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceModel) CopyFromPango(ctx context.Context, obj *ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsResourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsResourceNtpServersObject)

		diags.Append(ntpServers_object.CopyFromPango(ctx, obj.NtpServers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsResourceNtpServersObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsResourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerObject)

		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, obj.PrimaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsResourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerObject)

		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, obj.SecondaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.NtpServerAddress = ntpServerAddress_value
	o.AuthenticationType = authenticationType_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var symmetricKey_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_value types.String
	if obj.None != nil {
		none_value = types.StringValue(*obj.None)
	}
	var autokey_value types.String
	if obj.Autokey != nil {
		autokey_value = types.StringValue(*obj.Autokey)
	}
	o.None = none_value
	o.SymmetricKey = symmetricKey_object
	o.Autokey = autokey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.KeyId = keyId_value
	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.NtpServerAddress = ntpServerAddress_value
	o.AuthenticationType = authenticationType_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var symmetricKey_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_value types.String
	if obj.None != nil {
		none_value = types.StringValue(*obj.None)
	}
	var autokey_value types.String
	if obj.Autokey != nil {
		autokey_value = types.StringValue(*obj.Autokey)
	}
	o.None = none_value
	o.SymmetricKey = symmetricKey_object
	o.Autokey = autokey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.KeyId = keyId_value
	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | md5 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		} else {
			panic("solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | sha1 | authentication_key")
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (r *NtpSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Create",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.
	loc := NtpSettingsResourceTfid{}

	// TODO: this needs to handle location structure for UUID style shared has nested structure type

	if state.Location.System != nil {
		loc.Location.System = &ntp.SystemLocation{

			NgfwDevice: state.Location.System.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		loc.Location.Template = &ntp.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		loc.Location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	if err := loc.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ntp.Config

	ev := make(map[string]types.String)
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	// Tfid handling.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("Error creating tfid", err.Error())
		return
	}

	// Save the state.
	state.Tfid = types.StringValue(tfid)

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *NtpSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}
	var loc NtpSettingsResourceTfid
	// Parse the location from tfid.
	if err := DecodeLocation(savestate.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, loc.Location)
	if err != nil {
		tflog.Warn(ctx, "KK: HERE3-1", map[string]any{"Error": err.Error()})
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	// Save tfid to state.
	state.Tfid = savestate.Tfid

	// Save the answer to state.
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *NtpSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var loc NtpSettingsResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("Error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Update",
		"tfid":          state.Tfid.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, loc.Location)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, loc.Location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	// Save the tfid.
	tfid, err := EncodeLocation(&loc)
	if err != nil {
		resp.Diagnostics.AddError("error creating tfid", err.Error())
		return
	}
	state.Tfid = types.StringValue(tfid)

	copy_diags := state.CopyFromPango(ctx, updated, &ev)
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *NtpSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Parse the location from tfid.
	var loc NtpSettingsResourceTfid
	if err := DecodeLocation(state.Tfid.ValueString(), &loc); err != nil {
		resp.Diagnostics.AddError("error parsing tfid", err.Error())
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Delete",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	ev := make(map[string]types.String)
	var obj *ntp.Config
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.manager.Delete(ctx, loc.Location, obj)
	if err != nil && errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *NtpSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("tfid"), req, resp)
}

type NtpSettingsSystemLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsTemplateLocation struct {
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	PanoramaDevice types.String `tfsdk:"panorama_device"`
}
type NtpSettingsTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsLocation struct {
	System        *NtpSettingsSystemLocation        `tfsdk:"system"`
	Template      *NtpSettingsTemplateLocation      `tfsdk:"template"`
	TemplateStack *NtpSettingsTemplateStackLocation `tfsdk:"template_stack"`
}

func NtpSettingsLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"system": rsschema.SingleNestedAttribute{
				Description: "Located in a system settings.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("system"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}
